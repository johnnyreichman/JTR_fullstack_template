{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\n/**\n* Write logs\n* @class Logger\n*/\n\nvar ConsoleLogger =\n/** @class */\nfunction () {\n  /**\n  * @constructor\n  * @param {string} name - Name of the logger\n  */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = 'WARN';\n    }\n\n    this.name = name;\n    this.level = level;\n  }\n\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n  /**\n  * Write log\n  * @method\n  * @memeberof Logger\n  * @param {string} type - log type, default INFO\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype._log = function (type) {\n    var msg = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n\n    var logger_level_name = this.level;\n\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n\n    var log = console.log.bind(console);\n\n    if (type === 'ERROR' && console.error) {\n      log = console.error.bind(console);\n    }\n\n    if (type === 'WARN' && console.warn) {\n      log = console.warn.bind(console);\n    }\n\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      log(prefix + \" - \" + msg[0]);\n    } else if (msg.length === 1) {\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      log(prefix, msg);\n    }\n  };\n  /**\n  * Write General log. Default to INFO\n  * @method\n  * @memeberof Logger\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, ['INFO'].concat(msg));\n  };\n  /**\n  * Write INFO log\n  * @method\n  * @memeberof Logger\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, ['INFO'].concat(msg));\n  };\n  /**\n  * Write WARN log\n  * @method\n  * @memeberof Logger\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, ['WARN'].concat(msg));\n  };\n  /**\n  * Write ERROR log\n  * @method\n  * @memeberof Logger\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, ['ERROR'].concat(msg));\n  };\n  /**\n  * Write DEBUG log\n  * @method\n  * @memeberof Logger\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, ['DEBUG'].concat(msg));\n  };\n  /**\n  * Write VERBOSE log\n  * @method\n  * @memeberof Logger\n  * @param {string|object} msg - Logging message or object\n  */\n\n\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, ['VERBOSE'].concat(msg));\n  };\n\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\n\nexports.ConsoleLogger = ConsoleLogger;","map":{"version":3,"sources":["../../src/Logger/ConsoleLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LOG_LEVELS = {\n    VERBOSE: 1,\n    DEBUG: 2,\n    INFO: 3,\n    WARN: 4,\n    ERROR: 5\n};\n/**\n* Write logs\n* @class Logger\n*/\nvar ConsoleLogger = /** @class */ (function () {\n    /**\n    * @constructor\n    * @param {string} name - Name of the logger\n    */\n    function ConsoleLogger(name, level) {\n        if (level === void 0) { level = 'WARN'; }\n        this.name = name;\n        this.level = level;\n    }\n    ConsoleLogger.prototype._padding = function (n) {\n        return n < 10 ? '0' + n : '' + n;\n    };\n    ConsoleLogger.prototype._ts = function () {\n        var dt = new Date();\n        return [\n            this._padding(dt.getMinutes()),\n            this._padding(dt.getSeconds())\n        ].join(':') + '.' + dt.getMilliseconds();\n    };\n    /**\n    * Write log\n    * @method\n    * @memeberof Logger\n    * @param {string} type - log type, default INFO\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype._log = function (type) {\n        var msg = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            msg[_i - 1] = arguments[_i];\n        }\n        var logger_level_name = this.level;\n        if (ConsoleLogger.LOG_LEVEL) {\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\n        }\n        if ((typeof window !== 'undefined') && window.LOG_LEVEL) {\n            logger_level_name = window.LOG_LEVEL;\n        }\n        var logger_level = LOG_LEVELS[logger_level_name];\n        var type_level = LOG_LEVELS[type];\n        if (!(type_level >= logger_level)) {\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\n            return;\n        }\n        var log = console.log.bind(console);\n        if (type === 'ERROR' && console.error) {\n            log = console.error.bind(console);\n        }\n        if (type === 'WARN' && console.warn) {\n            log = console.warn.bind(console);\n        }\n        var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n        if (msg.length === 1 && typeof msg[0] === 'string') {\n            log(prefix + \" - \" + msg[0]);\n        }\n        else if (msg.length === 1) {\n            log(prefix, msg[0]);\n        }\n        else if (typeof msg[0] === 'string') {\n            var obj = msg.slice(1);\n            if (obj.length === 1) {\n                obj = obj[0];\n            }\n            log(prefix + \" - \" + msg[0], obj);\n        }\n        else {\n            log(prefix, msg);\n        }\n    };\n    /**\n    * Write General log. Default to INFO\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.log = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['INFO'].concat(msg));\n    };\n    /**\n    * Write INFO log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.info = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['INFO'].concat(msg));\n    };\n    /**\n    * Write WARN log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.warn = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['WARN'].concat(msg));\n    };\n    /**\n    * Write ERROR log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.error = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['ERROR'].concat(msg));\n    };\n    /**\n    * Write DEBUG log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.debug = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['DEBUG'].concat(msg));\n    };\n    /**\n    * Write VERBOSE log\n    * @method\n    * @memeberof Logger\n    * @param {string|object} msg - Logging message or object\n    */\n    ConsoleLogger.prototype.verbose = function () {\n        var msg = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            msg[_i] = arguments[_i];\n        }\n        this._log.apply(this, ['VERBOSE'].concat(msg));\n    };\n    ConsoleLogger.LOG_LEVEL = null;\n    return ConsoleLogger;\n}());\nexports.ConsoleLogger = ConsoleLogger;\n//# sourceMappingURL=ConsoleLogger.js.map"]},"metadata":{},"sourceType":"script"}