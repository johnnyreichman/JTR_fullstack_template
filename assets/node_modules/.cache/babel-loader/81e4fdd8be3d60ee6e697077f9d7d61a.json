{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\n\nvar randomBytes = function randomBytes(nBytes) {\n  return Buffer.from(CryptoJS.lib.WordArray.random(nBytes).toString(), 'hex');\n};\n\nimport BigInteger from './BigInteger';\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n/** @class */\n\nvar AuthenticationHelper = function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    _classCallCheck(this, AuthenticationHelper);\n\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n\n  AuthenticationHelper.prototype.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  };\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  };\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.generateRandomSmallA = function generateRandomSmallA() {\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n    var smallABigInt = randomBigInt.mod(this.N);\n    return smallABigInt;\n  };\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  };\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n\n\n  AuthenticationHelper.prototype.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  };\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n\n\n  AuthenticationHelper.prototype.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  };\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n\n\n  AuthenticationHelper.prototype.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  };\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n\n    this.randomPassword = this.generateRandomString();\n    var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  };\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n\n      callback(null, A);\n    });\n  };\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  };\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  };\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  };\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  };\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n\n    var usernamePassword = '' + this.poolName + username + ':' + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue.toString(16)), 'hex'));\n\n      callback(null, hkdf);\n    });\n  };\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  };\n  /**\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n  */\n\n\n  AuthenticationHelper.prototype.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  };\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} bigInt Number or string to pad.\n   * @returns {String} Padded hex string.\n   */\n\n\n  AuthenticationHelper.prototype.padHex = function padHex(bigInt) {\n    var hashStr = bigInt.toString(16);\n\n    if (hashStr.length % 2 === 1) {\n      hashStr = '0' + hashStr;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = '00' + hashStr;\n    }\n\n    return hashStr;\n  };\n\n  return AuthenticationHelper;\n}();\n\nexport default AuthenticationHelper;","map":{"version":3,"sources":["/Users/JohnnyReichman/Documents/independent_work/fullstack_template/JTR_fullstack_template/assets/node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Buffer","CryptoJS","SHA256","HmacSHA256","randomBytes","nBytes","from","lib","WordArray","random","toString","BigInteger","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","g","k","hexHash","smallAValue","generateRandomSmallA","getLargeAValue","infoBits","poolName","prototype","getSmallAValue","callback","_this","largeAValue","calculateA","err","hexRandom","randomBigInt","smallABigInt","mod","generateRandomString","getRandomPassword","randomPassword","getSaltDevices","SaltToHashDevices","getVerifierDevices","verifierDevices","generateHashDevice","deviceGroupKey","username","_this2","combinedString","hashedString","hash","padHex","modPow","verifierDevicesNotPadded","a","_this3","A","equals","ZERO","Error","calculateU","B","UHexHash","finalU","buf","str","create","hashHex","Array","length","join","hexStr","computehkdf","ikm","salt","infoBitsWordArray","concat","String","fromCharCode","ikmWordArray","saltWordArray","prk","hmac","slice","getPasswordAuthenticationKey","password","serverBValue","_this4","UValue","usernamePassword","usernamePasswordHash","xValue","calculateS","sValue","hkdf","_this5","gModPowXN","intValue2","subtract","multiply","add","err2","result","getNewPasswordRequiredChallengeUserAttributePrefix","bigInt","hashStr","indexOf"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\n\nvar randomBytes = function randomBytes(nBytes) {\n  return Buffer.from(CryptoJS.lib.WordArray.random(nBytes).toString(), 'hex');\n};\n\nimport BigInteger from './BigInteger';\n\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\n\nvar AuthenticationHelper = function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    _classCallCheck(this, AuthenticationHelper);\n\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n\n  AuthenticationHelper.prototype.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  };\n\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  };\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.generateRandomSmallA = function generateRandomSmallA() {\n    var hexRandom = randomBytes(128).toString('hex');\n\n    var randomBigInt = new BigInteger(hexRandom, 16);\n    var smallABigInt = randomBigInt.mod(this.N);\n\n    return smallABigInt;\n  };\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  };\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n\n\n  AuthenticationHelper.prototype.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  };\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n\n\n  AuthenticationHelper.prototype.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  };\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n\n\n  AuthenticationHelper.prototype.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  };\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n\n    this.randomPassword = this.generateRandomString();\n    var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n\n    var hexRandom = randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  };\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n\n      callback(null, A);\n    });\n  };\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n\n    return finalU;\n  };\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  };\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  };\n\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n\n\n  AuthenticationHelper.prototype.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  };\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n\n    var usernamePassword = '' + this.poolName + username + ':' + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue.toString(16)), 'hex'));\n\n      callback(null, hkdf);\n    });\n  };\n\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  AuthenticationHelper.prototype.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  };\n\n  /**\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n  */\n\n\n  AuthenticationHelper.prototype.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  };\n\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} bigInt Number or string to pad.\n   * @returns {String} Padded hex string.\n   */\n\n\n  AuthenticationHelper.prototype.padHex = function padHex(bigInt) {\n    var hashStr = bigInt.toString(16);\n    if (hashStr.length % 2 === 1) {\n      hashStr = '0' + hashStr;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = '00' + hashStr;\n    }\n    return hashStr;\n  };\n\n  return AuthenticationHelper;\n}();\n\nexport default AuthenticationHelper;"]},"metadata":{},"sourceType":"module"}