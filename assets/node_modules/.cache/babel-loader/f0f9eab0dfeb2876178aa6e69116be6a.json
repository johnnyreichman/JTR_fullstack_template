{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser = function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    _classCallCheck(this, CognitoUser);\n\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + '.' + this.username + '.userData';\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  };\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n\n\n  CognitoUser.prototype.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  };\n  /**\n   * @returns {string} the user's username\n   */\n\n\n  CognitoUser.prototype.getUsername = function getUsername() {\n    return this.username;\n  };\n  /**\n   * @returns {String} the authentication flow type\n   */\n\n\n  CognitoUser.prototype.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  };\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  };\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData()\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  };\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  };\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue = void 0;\n    var salt = void 0;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: authDetails.getValidationData()\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  };\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData()\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  };\n  /**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n\n\n  CognitoUser.prototype.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  };\n  /**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n  CognitoUser.prototype.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  };\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   * @private\n   */\n\n\n  CognitoUser.prototype.getDeviceResponse = function getDeviceResponse(callback) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  };\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  };\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  };\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  };\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.changePassword = function changePassword(oldUserPassword, newUserPassword, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.deleteUser = function deleteUser(callback) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.updateAttributes = function updateAttributes(attributes, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserData = function getUserData(callback, params) {\n    var _this10 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var bypassCache = params ? params.bypassCache : false;\n    var userData = this.storage.getItem(this.userDataKey); // get the cached user data\n\n    if (!userData || bypassCache) {\n      this.client.request('GetUser', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, latestUserData) {\n        if (err) {\n          return callback(err, null);\n        }\n\n        _this10.cacheUserData(latestUserData);\n\n        var refresh = _this10.signInUserSession.getRefreshToken();\n\n        if (refresh && refresh.getToken()) {\n          _this10.refreshSession(refresh, function (refreshError, data) {\n            if (refreshError) {\n              return callback(refreshError, null);\n            }\n\n            return callback(null, latestUserData);\n          });\n        } else {\n          return callback(null, latestUserData);\n        }\n      });\n    } else {\n      try {\n        return callback(null, JSON.parse(userData));\n      } catch (err) {\n        this.clearCachedUserData();\n        return callback(err, null);\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.resendConfirmationCode = function resendConfirmationCode(callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  };\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getSession = function getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var idTokenKey = keyPrefix + '.idToken';\n    var accessTokenKey = keyPrefix + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.clockDrift';\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  };\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.refreshSession = function refreshSession(refreshToken, callback) {\n    var _this11 = this;\n\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this11.clearCachedUser();\n        }\n\n        return callback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n\n        _this11.cacheTokens();\n\n        return callback(null, _this11.signInUserSession);\n      }\n\n      return undefined;\n    });\n  };\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.cacheTokens = function cacheTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, '' + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  };\n  /**\n   * This is to cache user data\n   */\n\n\n  CognitoUser.prototype.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  };\n  /**\n   * This is to remove cached user data\n   */\n\n\n  CognitoUser.prototype.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  CognitoUser.prototype.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  };\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  };\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  };\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  };\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  };\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n\n\n  CognitoUser.prototype.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  };\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgotPassword = function forgotPassword(callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  };\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess();\n    });\n  };\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess();\n    });\n    return undefined;\n  };\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgetDevice = function forgetDevice(callback) {\n    var _this12 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this12.deviceKey = null;\n        _this12.deviceGroupKey = null;\n        _this12.randomPassword = null;\n\n        _this12.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  };\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ListDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.globalSignOut = function globalSignOut(callback) {\n    var _this13 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this13.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this14 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this14.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.challengeName, data.challengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.challengeName, data.challengeParameters);\n      }\n\n      return undefined;\n    });\n  };\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  };\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this15 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this15.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  };\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this16 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this16.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this16.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this16.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this16.Session\n        };\n\n        if (_this16.getUserContextData()) {\n          jsonReq.UserContextData = _this16.getUserContextData();\n        }\n\n        _this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this16.cacheTokens();\n\n          return callback.onSuccess(_this16.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport default CognitoUser;","map":{"version":3,"sources":["/Users/JohnnyReichman/Documents/independent_work/fullstack_template/JTR_fullstack_template/assets/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Buffer","CryptoJS","TypedArrays","Base64","HmacSHA256","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getValidationData","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolId","split","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","message","lib","WordArray","create","concat","from","SECRET_BLOCK","key","signatureString","stringify","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","length","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","_this5","finalUserAttributes","Object","keys","forEach","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","UserAttributes","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","getUserData","params","_this10","bypassCache","getItem","latestUserData","cacheUserData","refresh","getRefreshToken","getToken","refreshSession","refreshError","deleteAttributes","UserAttributeNames","resendConfirmationCode","result","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this11","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this12","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","Limit","PaginationToken","globalSignOut","_this13","signOut","sendMFASelectionAnswer","_this14","associateSoftwareToken","_this15","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this16","UserCode","FriendlyDeviceName","errRespond","dataRespond"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\n\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser = function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    _classCallCheck(this, CognitoUser);\n\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n\n    this.client = data.Pool.client;\n\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n\n    this.storage = data.Storage || new StorageHelper().getStorage();\n\n    this.keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + '.' + this.username + '.userData';\n  }\n\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  };\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n\n\n  CognitoUser.prototype.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  };\n\n  /**\n   * @returns {string} the user's username\n   */\n\n\n  CognitoUser.prototype.getUsername = function getUsername() {\n    return this.username;\n  };\n\n  /**\n   * @returns {String} the authentication flow type\n   */\n\n\n  CognitoUser.prototype.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  };\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  };\n\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData()\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n      _this.cacheTokens();\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  };\n\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  };\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n\n    var serverBValue = void 0;\n    var salt = void 0;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: authDetails.getValidationData()\n      };\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n\n          var challengeResponses = {};\n\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n                _this2.clearCachedDeviceKeyAndPassword();\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  };\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData()\n    };\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    }\n    // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  };\n\n  /**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n\n\n  CognitoUser.prototype.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        _this4.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n      return undefined;\n    });\n    return undefined;\n  };\n\n  /**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n  CognitoUser.prototype.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n    var finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   * @private\n   */\n\n\n  CognitoUser.prototype.getDeviceResponse = function getDeviceResponse(callback) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n\n    var authParameters = {};\n\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters\n      };\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n\n          var challengeResponses = {};\n\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  };\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  };\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  };\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n          _this8.cacheDeviceKeyAndPassword();\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n        return undefined;\n      });\n      return undefined;\n    });\n  };\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.changePassword = function changePassword(oldUserPassword, newUserPassword, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.deleteUser = function deleteUser(callback) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      _this9.clearCachedUser();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.updateAttributes = function updateAttributes(attributes, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserData = function getUserData(callback, params) {\n    var _this10 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var bypassCache = params ? params.bypassCache : false;\n\n    var userData = this.storage.getItem(this.userDataKey);\n    // get the cached user data\n\n    if (!userData || bypassCache) {\n      this.client.request('GetUser', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, latestUserData) {\n        if (err) {\n          return callback(err, null);\n        }\n        _this10.cacheUserData(latestUserData);\n        var refresh = _this10.signInUserSession.getRefreshToken();\n        if (refresh && refresh.getToken()) {\n          _this10.refreshSession(refresh, function (refreshError, data) {\n            if (refreshError) {\n              return callback(refreshError, null);\n            }\n            return callback(null, latestUserData);\n          });\n        } else {\n          return callback(null, latestUserData);\n        }\n      });\n    } else {\n      try {\n        return callback(null, JSON.parse(userData));\n      } catch (err) {\n        this.clearCachedUserData();\n        return callback(err, null);\n      }\n    }\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.resendConfirmationCode = function resendConfirmationCode(callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username\n    };\n\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, result);\n    });\n  };\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getSession = function getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var idTokenKey = keyPrefix + '.idToken';\n    var accessTokenKey = keyPrefix + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.clockDrift';\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  };\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.refreshSession = function refreshSession(refreshToken, callback) {\n    var _this11 = this;\n\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this11.clearCachedUser();\n        }\n        return callback(err, null);\n      }\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        _this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n        _this11.cacheTokens();\n        return callback(null, _this11.signInUserSession);\n      }\n      return undefined;\n    });\n  };\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.cacheTokens = function cacheTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, '' + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  };\n\n  /**\n   * This is to cache user data\n   */\n\n\n  CognitoUser.prototype.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  };\n\n  /**\n   * This is to remove cached user data\n   */\n\n\n  CognitoUser.prototype.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  CognitoUser.prototype.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  };\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  };\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  };\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  };\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  };\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n\n\n  CognitoUser.prototype.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n\n    return new CognitoUserSession(sessionData);\n  };\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgotPassword = function forgotPassword(callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess(data);\n    });\n  };\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  };\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgetDevice = function forgetDevice(callback) {\n    var _this12 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this12.deviceKey = null;\n        _this12.deviceGroupKey = null;\n        _this12.randomPassword = null;\n        _this12.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      }\n    });\n  };\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ListDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.globalSignOut = function globalSignOut(callback) {\n    var _this13 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this13.clearCachedUser();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this14 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this14.Session = data.Session;\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.challengeName, data.challengeParameters);\n      }\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.challengeName, data.challengeParameters);\n      }\n      return undefined;\n    });\n  };\n\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  };\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this15 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this15.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  };\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this16 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this16.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this16.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this16.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this16.Session\n        };\n        if (_this16.getUserContextData()) {\n          jsonReq.UserContextData = _this16.getUserContextData();\n        }\n        _this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n          _this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n          _this16.cacheTokens();\n          return callback.onSuccess(_this16.signInUserSession);\n        });\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport default CognitoUser;"]},"metadata":{},"sourceType":"module"}