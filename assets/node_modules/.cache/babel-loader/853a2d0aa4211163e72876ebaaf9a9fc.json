{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nvar core_1 = require(\"@aws-amplify/core\");\n\nvar amazon_cognito_identity_js_1 = require(\"amazon-cognito-identity-js\");\n\nvar url_1 = require(\"url\");\n\nvar OAuth_1 = require(\"./OAuth/OAuth\");\n\nvar urlListener_1 = require(\"./urlListener\");\n\nvar logger = new core_1.ConsoleLogger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAuthEvent = function dispatchAuthEvent(event, data, message) {\n  core_1.Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\n\nvar CognitoHostedUIIdentityProvider;\n\n(function (CognitoHostedUIIdentityProvider) {\n  CognitoHostedUIIdentityProvider[\"Cognito\"] = \"COGNITO\";\n  CognitoHostedUIIdentityProvider[\"Google\"] = \"Google\";\n  CognitoHostedUIIdentityProvider[\"Facebook\"] = \"Facebook\";\n  CognitoHostedUIIdentityProvider[\"Amazon\"] = \"LoginWithAmazon\";\n})(CognitoHostedUIIdentityProvider = exports.CognitoHostedUIIdentityProvider || (exports.CognitoHostedUIIdentityProvider = {}));\n/**\n* Provide authentication steps\n*/\n\n\nvar AuthClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize Auth with AWS configurations\n   * @param {Object} config - Configuration of the Auth\n   */\n  function AuthClass(config) {\n    var _this = this;\n\n    this.userPool = null;\n    this.user = null;\n    this.configure(config);\n    this.currentUserCredentials = this.currentUserCredentials.bind(this);\n\n    if (core_1.AWS.config) {\n      core_1.AWS.config.update({\n        customUserAgent: core_1.Constants.userAgent\n      });\n    } else {\n      logger.warn('No AWS.config');\n    }\n\n    core_1.Hub.listen('auth', function (_a) {\n      var payload = _a.payload;\n      var event = payload.event;\n\n      switch (event) {\n        case 'signIn':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n\n          break;\n\n        case 'signOut':\n          _this._storage.removeItem('amplify-signin-with-hostedUI');\n\n          break;\n\n        case 'cognitoHostedUI':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n\n          break;\n      }\n    });\n  }\n\n  AuthClass.prototype.getModuleName = function () {\n    return 'Auth';\n  };\n\n  AuthClass.prototype.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config || {};\n    logger.debug('configure Auth');\n    var conf = Object.assign({}, this._config, core_1.Parser.parseMobilehubConfig(config).Auth, config);\n    this._config = conf;\n    var _a = this._config,\n        userPoolId = _a.userPoolId,\n        userPoolWebClientId = _a.userPoolWebClientId,\n        cookieStorage = _a.cookieStorage,\n        oauth = _a.oauth,\n        region = _a.region,\n        identityPoolId = _a.identityPoolId,\n        mandatorySignIn = _a.mandatorySignIn,\n        refreshHandlers = _a.refreshHandlers,\n        identityPoolRegion = _a.identityPoolRegion;\n\n    if (!this._config.storage) {\n      // backward compatbility\n      if (cookieStorage) this._storage = new amazon_cognito_identity_js_1.CookieStorage(cookieStorage);else {\n        this._storage = new core_1.StorageHelper().getStorage();\n      }\n    } else {\n      if (!this._isValidAuthStorage(this._config.storage)) {\n        logger.error('The storage in the Auth config is not valid!');\n        throw new Error('Empty storage object');\n      }\n\n      this._storage = this._config.storage;\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    if (userPoolId) {\n      var userPoolData = {\n        UserPoolId: userPoolId,\n        ClientId: userPoolWebClientId\n      };\n      userPoolData.Storage = this._storage;\n      this.userPool = new amazon_cognito_identity_js_1.CognitoUserPool(userPoolData);\n    }\n\n    core_1.Credentials.configure({\n      mandatorySignIn: mandatorySignIn,\n      region: identityPoolRegion || region,\n      userPoolId: userPoolId,\n      identityPoolId: identityPoolId,\n      refreshHandlers: refreshHandlers,\n      storage: this._storage\n    }); // initiailize cognitoauth client if hosted ui options provided\n    // to keep backward compatibility:\n\n    var cognitoHostedUIConfig = oauth ? types_1.isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : undefined;\n\n    if (cognitoHostedUIConfig) {\n      var cognitoAuthParams = Object.assign({\n        cognitoClientId: userPoolWebClientId,\n        UserPoolId: userPoolId,\n        domain: cognitoHostedUIConfig['domain'],\n        scopes: cognitoHostedUIConfig['scope'],\n        redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n        redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n        responseType: cognitoHostedUIConfig['responseType'],\n        Storage: this._storage,\n        urlOpener: cognitoHostedUIConfig['urlOpener']\n      }, cognitoHostedUIConfig['options']);\n      this._oAuthHandler = new OAuth_1.default({\n        scopes: cognitoAuthParams.scopes,\n        config: cognitoAuthParams,\n        cognitoClientId: cognitoAuthParams.cognitoClientId\n      }); // **NOTE** - Remove this in a future major release as it is a breaking change\n\n      urlListener_1.default(function (_a) {\n        var url = _a.url;\n\n        _this._handleAuthResponse(url);\n      });\n    }\n\n    dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n    return this._config;\n  };\n  /**\n   * Sign up with username, password and other attrbutes like phone, email\n   * @param {String | object} params - The user attirbutes used for signin\n   * @param {String[]} restOfAttrs - for the backward compatability\n   * @return - A promise resolves callback data if success\n   */\n\n\n  AuthClass.prototype.signUp = function (params) {\n    var _this = this;\n\n    var restOfAttrs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      restOfAttrs[_i - 1] = arguments[_i];\n    }\n\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    var username = null;\n    var password = null;\n    var attributes = [];\n    var validationData = null;\n\n    if (params && typeof params === 'string') {\n      username = params;\n      password = restOfAttrs ? restOfAttrs[0] : null;\n      var email = restOfAttrs ? restOfAttrs[1] : null;\n      var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n      if (email) attributes.push({\n        Name: 'email',\n        Value: email\n      });\n      if (phone_number) attributes.push({\n        Name: 'phone_number',\n        Value: phone_number\n      });\n    } else if (params && typeof params === 'object') {\n      username = params['username'];\n      password = params['password'];\n      var attrs_1 = params['attributes'];\n\n      if (attrs_1) {\n        Object.keys(attrs_1).map(function (key) {\n          var ele = {\n            Name: key,\n            Value: attrs_1[key]\n          };\n          attributes.push(ele);\n        });\n      }\n\n      validationData = params['validationData'] || null;\n    } else {\n      return Promise.reject('The first parameter should either be non-null string or object');\n    }\n\n    if (!username) {\n      return Promise.reject('Username cannot be empty');\n    }\n\n    if (!password) {\n      return Promise.reject('Password cannot be empty');\n    }\n\n    logger.debug('signUp attrs:', attributes);\n    logger.debug('signUp validation data:', validationData);\n    return new Promise(function (resolve, reject) {\n      _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n        if (err) {\n          dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n          reject(err);\n        } else {\n          dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n          resolve(data);\n        }\n      });\n    });\n  };\n  /**\n   * Send the verfication code to confirm sign up\n   * @param {String} username - The username to be confirmed\n   * @param {String} code - The verification code\n   * @param {ConfirmSignUpOptions} options - other options for confirm signup\n   * @return - A promise resolves callback data if success\n   */\n\n\n  AuthClass.prototype.confirmSignUp = function (username, code, options) {\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    if (!username) {\n      return Promise.reject('Username cannot be empty');\n    }\n\n    if (!code) {\n      return Promise.reject('Code cannot be empty');\n    }\n\n    var user = this.createCognitoUser(username);\n    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean' ? options.forceAliasCreation : true;\n    return new Promise(function (resolve, reject) {\n      user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  };\n  /**\n   * Resend the verification code\n   * @param {String} username - The username to be confirmed\n   * @return - A promise resolves data if success\n   */\n\n\n  AuthClass.prototype.resendSignUp = function (username) {\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    if (!username) {\n      return Promise.reject('Username cannot be empty');\n    }\n\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.resendConfirmationCode(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  };\n  /**\n   * Sign in\n   * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n   * @param {String} password - The password of the username\n   * @return - A promise resolves the CognitoUser\n   */\n\n\n  AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw) {\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    var username = null;\n    var password = null;\n    var validationData = {}; // for backward compatibility\n\n    if (typeof usernameOrSignInOpts === 'string') {\n      username = usernameOrSignInOpts;\n      password = pw;\n    } else if (types_1.isUsernamePasswordOpts(usernameOrSignInOpts)) {\n      if (typeof pw !== 'undefined') {\n        logger.warn('The password should be defined under the first parameter object!');\n      }\n\n      username = usernameOrSignInOpts.username;\n      password = usernameOrSignInOpts.password;\n      validationData = usernameOrSignInOpts.validationData;\n    } else {\n      return Promise.reject(new Error('The username should either be a string or one of the sign in types'));\n    }\n\n    if (!username) {\n      return Promise.reject('Username cannot be empty');\n    }\n\n    var authDetails = new amazon_cognito_identity_js_1.AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData\n    });\n\n    if (password) {\n      return this.signInWithPassword(authDetails);\n    } else {\n      return this.signInWithoutPassword(authDetails);\n    }\n  };\n  /**\n   * Return an object with the authentication callbacks\n   * @param {CognitoUser} user - the cognito user object\n   * @param {} resolve - function called when resolving the current step\n   * @param {} reject - function called when rejecting the current step\n   * @return - an object with the callback methods for user authentication\n   */\n\n\n  AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n    var _this = this;\n\n    var that = this;\n    return {\n      onSuccess: function onSuccess(session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cred, e_1, currentUser, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug(session);\n                delete user['challengeName'];\n                delete user['challengeParam'];\n                _a.label = 1;\n\n              case 1:\n                _a.trys.push([1, 4, 5, 9]);\n\n                return [4\n                /*yield*/\n                , core_1.Credentials.clear()];\n\n              case 2:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , core_1.Credentials.set(session, 'session')];\n\n              case 3:\n                cred = _a.sent();\n                logger.debug('succeed to get cognito credentials', cred);\n                return [3\n                /*break*/\n                , 9];\n\n              case 4:\n                e_1 = _a.sent();\n                logger.debug('cannot get cognito credentials', e_1);\n                return [3\n                /*break*/\n                , 9];\n\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n\n                return [4\n                /*yield*/\n                , this.currentUserPoolUser()];\n\n              case 6:\n                currentUser = _a.sent();\n                that.user = currentUser;\n                dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                resolve(currentUser);\n                return [3\n                /*break*/\n                , 8];\n\n              case 7:\n                e_2 = _a.sent();\n                logger.error('Failed to get the signed in user', e_2);\n                reject(e_2);\n                return [3\n                /*break*/\n                , 8];\n\n              case 8:\n                return [7\n                /*endfinally*/\n                ];\n\n              case 9:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      },\n      onFailure: function onFailure(err) {\n        logger.debug('signIn failure', err);\n        dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n        reject(err);\n      },\n      customChallenge: function customChallenge(challengeParam) {\n        logger.debug('signIn custom challenge answer required');\n        user['challengeName'] = 'CUSTOM_CHALLENGE';\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaRequired: function mfaRequired(challengeName, challengeParam) {\n        logger.debug('signIn MFA required');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaSetup: function mfaSetup(challengeName, challengeParam) {\n        logger.debug('signIn mfa setup', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      newPasswordRequired: function newPasswordRequired(userAttributes, requiredAttributes) {\n        logger.debug('signIn new password');\n        user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n        user['challengeParam'] = {\n          userAttributes: userAttributes,\n          requiredAttributes: requiredAttributes\n        };\n        resolve(user);\n      },\n      totpRequired: function totpRequired(challengeName, challengeParam) {\n        logger.debug('signIn totpRequired');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      selectMFAType: function selectMFAType(challengeName, challengeParam) {\n        logger.debug('signIn selectMFAType', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      }\n    };\n  };\n  /**\n   * Sign in with a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n\n\n  AuthClass.prototype.signInWithPassword = function (authDetails) {\n    var _this = this;\n\n    var user = this.createCognitoUser(authDetails.getUsername());\n    return new Promise(function (resolve, reject) {\n      user.authenticateUser(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * Sign in without a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n\n\n  AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n    var _this = this;\n\n    var user = this.createCognitoUser(authDetails.getUsername());\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    return new Promise(function (resolve, reject) {\n      user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * get user current preferred mfa option\n   * this method doesn't work with totp, we need to deprecate it.\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves the current preferred mfa option if success\n   */\n\n\n  AuthClass.prototype.getMFAOptions = function (user) {\n    return new Promise(function (res, rej) {\n      user.getMFAOptions(function (err, mfaOptions) {\n        if (err) {\n          logger.debug('get MFA Options failed', err);\n          rej(err);\n          return;\n        }\n\n        logger.debug('get MFA options success', mfaOptions);\n        res(mfaOptions);\n        return;\n      });\n    });\n  };\n  /**\n   * get preferred mfa method\n   * @param {CognitoUser} user - the current cognito user\n   * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n   */\n\n\n  AuthClass.prototype.getPreferredMFA = function (user, params) {\n    var that = this;\n    return new Promise(function (res, rej) {\n      var bypassCache = params ? params.bypassCache : false;\n      user.getUserData(function (err, data) {\n        if (err) {\n          logger.debug('getting preferred mfa failed', err);\n          rej(err);\n          return;\n        }\n\n        var mfaType = that._getMfaTypeFromUserData(data);\n\n        if (!mfaType) {\n          rej('invalid MFA Type');\n          return;\n        } else {\n          res(mfaType);\n          return;\n        }\n      }, {\n        bypassCache: bypassCache\n      });\n    });\n  };\n\n  AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n    var ret = null;\n    var preferredMFA = data.PreferredMfaSetting; // if the user has used Auth.setPreferredMFA() to setup the mfa type\n    // then the \"PreferredMfaSetting\" would exist in the response\n\n    if (preferredMFA) {\n      ret = preferredMFA;\n    } else {\n      // if mfaList exists but empty, then its noMFA\n      var mfaList = data.UserMFASettingList;\n\n      if (!mfaList) {\n        // if SMS was enabled by using Auth.enableSMS(),\n        // the response would contain MFAOptions\n        // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n        // if it does not exist, then it should be NOMFA\n        var MFAOptions = data.MFAOptions;\n\n        if (MFAOptions) {\n          ret = 'SMS_MFA';\n        } else {\n          ret = 'NOMFA';\n        }\n      } else if (mfaList.length === 0) {\n        ret = 'NOMFA';\n      } else {\n        logger.debug('invalid case for getPreferredMFA', data);\n      }\n    }\n\n    return ret;\n  };\n\n  AuthClass.prototype._getUserData = function (user, params) {\n    return new Promise(function (res, rej) {\n      user.getUserData(function (err, data) {\n        if (err) {\n          logger.debug('getting user data failed', err);\n          rej(err);\n          return;\n        } else {\n          res(data);\n          return;\n        }\n      }, params);\n    });\n  };\n  /**\n   * set preferred MFA method\n   * @param {CognitoUser} user - the current Cognito user\n   * @param {string} mfaMethod - preferred mfa method\n   * @return - A promise resolve if success\n   */\n\n\n  AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getUserData(user, {\n              bypassCache: true\n            })];\n\n          case 1:\n            userData = _b.sent();\n            smsMfaSettings = null;\n            totpMfaSettings = null;\n            _a = mfaMethod;\n\n            switch (_a) {\n              case 'TOTP' || 'SOFTWARE_TOKEN_MFA':\n                return [3\n                /*break*/\n                , 2];\n\n              case 'SMS' || 'SMS_MFA':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'NOMFA':\n                return [3\n                /*break*/\n                , 4];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            totpMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 3:\n            smsMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 4:\n            mfaList = userData['UserMFASettingList'];\n            return [4\n            /*yield*/\n            , this._getMfaTypeFromUserData(userData)];\n\n          case 5:\n            currentMFAType = _b.sent();\n\n            if (currentMFAType === 'NOMFA') {\n              return [2\n              /*return*/\n              , Promise.resolve('No change for mfa type')];\n            } else if (currentMFAType === 'SMS_MFA') {\n              smsMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n              totpMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else {\n              return [2\n              /*return*/\n              , Promise.reject('invalid MFA type')];\n            } // if there is a UserMFASettingList in the response\n            // we need to disable every mfa type in that list\n\n\n            if (mfaList && mfaList.length !== 0) {\n              // to disable SMS or TOTP if exists in that list\n              mfaList.forEach(function (mfaType) {\n                if (mfaType === 'SMS_MFA') {\n                  smsMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                } else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                  totpMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                }\n              });\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            logger.debug('no validmfa method provided');\n            return [2\n            /*return*/\n            , Promise.reject('no validmfa method provided')];\n\n          case 7:\n            that = this;\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                if (err) {\n                  logger.debug('Set user mfa preference error', err);\n                  return rej(err);\n                }\n\n                logger.debug('Set user mfa success', result);\n                logger.debug('Caching the latest user data into local'); // cache the latest result into user data\n\n                user.getUserData(function (err, data) {\n                  if (err) {\n                    logger.debug('getting user data failed', err);\n                    return rej(err);\n                  } else {\n                    return res(result);\n                  }\n                }, {\n                  bypassCache: true\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * diable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n\n\n  AuthClass.prototype.disableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.disableMFA(function (err, data) {\n        if (err) {\n          logger.debug('disable mfa failed', err);\n          rej(err);\n          return;\n        }\n\n        logger.debug('disable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * enable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n\n\n  AuthClass.prototype.enableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.enableMFA(function (err, data) {\n        if (err) {\n          logger.debug('enable mfa failed', err);\n          rej(err);\n          return;\n        }\n\n        logger.debug('enable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * Setup TOTP\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves with the secret code if success\n   */\n\n\n  AuthClass.prototype.setupTOTP = function (user) {\n    return new Promise(function (res, rej) {\n      user.associateSoftwareToken({\n        onFailure: function onFailure(err) {\n          logger.debug('associateSoftwareToken failed', err);\n          rej(err);\n          return;\n        },\n        associateSecretCode: function associateSecretCode(secretCode) {\n          logger.debug('associateSoftwareToken sucess', secretCode);\n          res(secretCode);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * verify TOTP setup\n   * @param {CognitoUser} user - the current user\n   * @param {string} challengeAnswer - challenge answer\n   * @return - A promise resolves is success\n   */\n\n\n  AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n    logger.debug('verfication totp token', user, challengeAnswer);\n    return new Promise(function (res, rej) {\n      user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n        onFailure: function onFailure(err) {\n          logger.debug('verifyTotpToken failed', err);\n          rej(err);\n          return;\n        },\n        onSuccess: function onSuccess(data) {\n          logger.debug('verifyTotpToken success', data);\n          res(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Send MFA code to confirm sign in\n   * @param {Object} user - The CognitoUser object\n   * @param {String} code - The confirmation code\n   */\n\n\n  AuthClass.prototype.confirmSignIn = function (user, code, mfaType) {\n    var _this = this;\n\n    if (!code) {\n      return Promise.reject('Code cannot be empty');\n    }\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendMFACode(code, {\n        onSuccess: function onSuccess(session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_3;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n\n                  return [4\n                  /*yield*/\n                  , core_1.Credentials.clear()];\n\n                case 2:\n                  _a.sent();\n\n                  return [4\n                  /*yield*/\n                  , core_1.Credentials.set(session, 'session')];\n\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 4:\n                  e_3 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_3);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, user + \" has signed in\");\n                  resolve(user);\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 6:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        },\n        onFailure: function onFailure(err) {\n          logger.debug('confirm signIn failure', err);\n          reject(err);\n        }\n      }, mfaType);\n    });\n  };\n\n  AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes) {\n    var _this = this;\n\n    if (!password) {\n      return Promise.reject('Password cannot be empty');\n    }\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.completeNewPasswordChallenge(password, requiredAttributes, {\n        onSuccess: function onSuccess(session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_4;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n\n                  return [4\n                  /*yield*/\n                  , core_1.Credentials.clear()];\n\n                case 2:\n                  _a.sent();\n\n                  return [4\n                  /*yield*/\n                  , core_1.Credentials.set(session, 'session')];\n\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 4:\n                  e_4 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_4);\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, user + \" has signed in\");\n                  resolve(user);\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 6:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        },\n        onFailure: function onFailure(err) {\n          logger.debug('completeNewPassword failure', err);\n          dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n          reject(err);\n        },\n        mfaRequired: function mfaRequired(challengeName, challengeParam) {\n          logger.debug('signIn MFA required');\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        mfaSetup: function mfaSetup(challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        }\n      });\n    });\n  };\n  /**\n   * Send the answer to a custom challenge\n   * @param {CognitoUser} user - The CognitoUser object\n   * @param {String} challengeResponses - The confirmation code\n   */\n\n\n  AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses) {\n    var _this = this;\n\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    if (!challengeResponses) {\n      return Promise.reject('Challenge response cannot be empty');\n    }\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * Update an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n\n\n  AuthClass.prototype.updateUserAttributes = function (user, attributes) {\n    var attributeList = [];\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        for (var key in attributes) {\n          if (key !== 'sub' && key.indexOf('_verified') < 0) {\n            var attr = {\n              'Name': key,\n              'Value': attributes[key]\n            };\n            attributeList.push(attr);\n          }\n        }\n\n        user.updateAttributes(attributeList, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Return user attributes\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to user attributes if success\n   */\n\n\n  AuthClass.prototype.userAttributes = function (user) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.getUserAttributes(function (err, attributes) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(attributes);\n          }\n        });\n      });\n    });\n  };\n\n  AuthClass.prototype.verifiedContact = function (user) {\n    var that = this;\n    return this.userAttributes(user).then(function (attributes) {\n      var attrs = that.attributesToObject(attributes);\n      var unverified = {};\n      var verified = {};\n\n      if (attrs['email']) {\n        if (attrs['email_verified']) {\n          verified['email'] = attrs['email'];\n        } else {\n          unverified['email'] = attrs['email'];\n        }\n      }\n\n      if (attrs['phone_number']) {\n        if (attrs['phone_number_verified']) {\n          verified['phone_number'] = attrs['phone_number'];\n        } else {\n          unverified['phone_number'] = attrs['phone_number'];\n        }\n      }\n\n      return {\n        verified: verified,\n        unverified: unverified\n      };\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n\n\n  AuthClass.prototype.currentUserPoolUser = function (params) {\n    var _this = this;\n\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    var that = this;\n    return new Promise(function (res, rej) {\n      _this._storageSync.then(function () {\n        var user = that.userPool.getCurrentUser();\n\n        if (!user) {\n          logger.debug('Failed to get user from user pool');\n          rej('No current user');\n          return;\n        } // refresh the session if the session expired.\n\n\n        user.getSession(function (err, session) {\n          if (err) {\n            logger.debug('Failed to get the user session', err);\n            rej(err);\n            return;\n          } // get user data from Cognito\n\n\n          var bypassCache = params ? params.bypassCache : false; // validate the token's scope fisrt before calling this function\n\n          var _a = session.getAccessToken().decodePayload().scope,\n              scope = _a === void 0 ? '' : _a;\n\n          if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n            user.getUserData(function (err, data) {\n              if (err) {\n                logger.debug('getting user data failed', err); // Make sure the user is still valid\n\n                if (err.message === 'User is disabled' || err.message === 'User does not exist.') {\n                  rej(err);\n                } else {\n                  // the error may also be thrown when lack of permissions to get user info etc\n                  // in that case we just bypass the error\n                  res(user);\n                }\n\n                return;\n              }\n\n              var preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n              var attributeList = [];\n\n              for (var i = 0; i < data.UserAttributes.length; i++) {\n                var attribute = {\n                  Name: data.UserAttributes[i].Name,\n                  Value: data.UserAttributes[i].Value\n                };\n                var userAttribute = new amazon_cognito_identity_js_1.CognitoUserAttribute(attribute);\n                attributeList.push(userAttribute);\n              }\n\n              var attributes = that.attributesToObject(attributeList);\n              Object.assign(user, {\n                attributes: attributes,\n                preferredMFA: preferredMFA\n              });\n              return res(user);\n            }, {\n              bypassCache: bypassCache\n            });\n          } else {\n            logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" + \"is not in the scopes of the access token\");\n            return res(user);\n          }\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to sync cache info into memory', e);\n        return rej(e);\n      });\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @param {CurrentUserOpts} - options for getting the current user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n\n\n  AuthClass.prototype.currentAuthenticatedUser = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedUser, e_5, user, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting current authenticted user');\n            federatedUser = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_5 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_5);\n            throw e_5;\n\n          case 4:\n            try {\n              federatedUser = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user;\n            } catch (e) {\n              logger.debug('cannot load federated user from auth storage');\n            }\n\n            if (!federatedUser) return [3\n            /*break*/\n            , 5];\n            this.user = federatedUser;\n            logger.debug('get current authenticated federated user', this.user);\n            return [2\n            /*return*/\n            , this.user];\n\n          case 5:\n            logger.debug('get current authenticated userpool user');\n            user = null;\n            _a.label = 6;\n\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser(params)];\n\n          case 7:\n            user = _a.sent();\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            e_6 = _a.sent();\n\n            if (e_6 === 'No userPool') {\n              logger.error('Cannot get the current user because the user pool is missing. ' + 'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n            }\n\n            logger.debug('The user is not authenticated by the error', e_6);\n            throw 'not authenticated';\n\n          case 9:\n            this.user = user;\n            return [2\n            /*return*/\n            , this.user];\n        }\n      });\n    });\n  };\n  /**\n   * Get current user's session\n   * @return - A promise resolves to session object if success\n   */\n\n\n  AuthClass.prototype.currentSession = function () {\n    var that = this;\n    logger.debug('Getting current session');\n\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    return new Promise(function (res, rej) {\n      that.currentUserPoolUser().then(function (user) {\n        that.userSession(user).then(function (session) {\n          res(session);\n          return;\n        }).catch(function (e) {\n          logger.debug('Failed to get the current session', e);\n          rej(e);\n          return;\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to get the current user', e);\n        rej(e);\n        return;\n      });\n    });\n  };\n  /**\n   * Get the corresponding user session\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to the session\n   */\n\n\n  AuthClass.prototype.userSession = function (user) {\n    if (!user) {\n      logger.debug('the user is null');\n      return Promise.reject('Failed to get the session because the user is empty');\n    }\n\n    return new Promise(function (resolve, reject) {\n      logger.debug('Getting the session from this user:', user);\n      user.getSession(function (err, session) {\n        if (err) {\n          logger.debug('Failed to get the session from user', user);\n          reject(err);\n          return;\n        } else {\n          logger.debug('Succeed to get the user session', session);\n          resolve(session);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Get  authenticated credentials of current user.\n   * @return - A promise resolves to be current user's credentials\n   */\n\n\n  AuthClass.prototype.currentUserCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var that, e_7, federatedInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            that = this;\n            logger.debug('Getting current user credentials');\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_7 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_7);\n            throw e_7;\n\n          case 4:\n            federatedInfo = null;\n\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n            } catch (e) {\n              logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n            }\n\n            if (federatedInfo) {\n              // refresh the jwt token here if necessary\n              return [2\n              /*return*/\n              , core_1.Credentials.refreshFederatedToken(federatedInfo)];\n            } else {\n              return [2\n              /*return*/\n              , this.currentSession().then(function (session) {\n                logger.debug('getting session success', session);\n                return core_1.Credentials.set(session, 'session');\n              }).catch(function (error) {\n                logger.debug('getting session failed', error);\n                return core_1.Credentials.set(null, 'guest');\n              })];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.currentCredentials = function () {\n    logger.debug('getting current credntials');\n    return core_1.Credentials.get();\n  };\n  /**\n   * Initiate an attribute confirmation request\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attributes to be verified\n   * @return - A promise resolves to callback data if success\n   */\n\n\n  AuthClass.prototype.verifyUserAttribute = function (user, attr) {\n    return new Promise(function (resolve, reject) {\n      user.getAttributeVerificationCode(attr, {\n        onSuccess: function onSuccess() {\n          return resolve();\n        },\n        onFailure: function onFailure(err) {\n          return reject(err);\n        }\n      });\n    });\n  };\n  /**\n   * Confirm an attribute using a confirmation code\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n\n\n  AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n    if (!code) {\n      return Promise.reject('Code cannot be empty');\n    }\n\n    return new Promise(function (resolve, reject) {\n      user.verifyAttribute(attr, code, {\n        onSuccess: function onSuccess(data) {\n          resolve(data);\n          return;\n        },\n        onFailure: function onFailure(err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttribute(user, attr);\n    });\n  };\n  /**\n   * Confirm current user's attribute using a confirmation code\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n\n\n  AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttributeSubmit(user, attr, code);\n    });\n  };\n\n  AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_8, isSignedInHostedUI;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_8 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_8);\n            throw e_8;\n\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              if (opts && opts.global) {\n                logger.debug('user global sign out', user); // in order to use global signout\n                // we must validate the user as an authenticated user by using getSession\n\n                user.getSession(function (err, result) {\n                  if (err) {\n                    logger.debug('failed to get the user session', err);\n                    return rej(err);\n                  }\n\n                  user.globalSignOut({\n                    onSuccess: function onSuccess(data) {\n                      logger.debug('global sign out success');\n\n                      if (isSignedInHostedUI) {\n                        return res(_this._oAuthHandler.signOut());\n                      } else {\n                        return res();\n                      }\n                    },\n                    onFailure: function onFailure(err) {\n                      logger.debug('global sign out failed', err);\n                      return rej(err);\n                    }\n                  });\n                });\n              } else {\n                logger.debug('user sign out', user);\n                user.signOut();\n\n                if (isSignedInHostedUI) {\n                  return res(_this._oAuthHandler.signOut());\n                } else {\n                  return res();\n                }\n              }\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Sign out method\n   * @\n   * @return - A promise resolved if success\n   */\n\n\n  AuthClass.prototype.signOut = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_9, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.cleanCachedItems()];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_9 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            if (!this.userPool) return [3\n            /*break*/\n            , 7];\n            user = this.userPool.getCurrentUser();\n            if (!user) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.cognitoIdentitySignOut(opts, user)];\n\n          case 4:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('no current Cognito user');\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            logger.debug('no Congito User pool');\n            _a.label = 8;\n\n          case 8:\n            /**\n             * Note for future refactor - no reliable way to get username with\n             * Cognito User Pools vs Identity when federating with Social Providers\n             * This is why we need a well structured session object that can be inspected\n             * and information passed back in the message below for Hub dispatch\n            */\n            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            this.user = null;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.cleanCachedItems = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // clear cognito cached item\n            return [4\n            /*yield*/\n            , core_1.Credentials.clear()];\n\n          case 1:\n            // clear cognito cached item\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Change a password for an authenticated user\n   * @param {Object} user - The CognitoUser object\n   * @param {String} oldPassword - the current password\n   * @param {String} newPassword - the requested new password\n   * @return - A promise resolves if success\n   */\n\n\n  AuthClass.prototype.changePassword = function (user, oldPassword, newPassword) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.changePassword(oldPassword, newPassword, function (err, data) {\n          if (err) {\n            logger.debug('change password failure', err);\n            return reject(err);\n          } else {\n            return resolve(data);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Initiate a forgot password request\n   * @param {String} username - the username to change password\n   * @return - A promise resolves if success\n   */\n\n\n  AuthClass.prototype.forgotPassword = function (username) {\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    if (!username) {\n      return Promise.reject('Username cannot be empty');\n    }\n\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.forgotPassword({\n        onSuccess: function onSuccess() {\n          resolve();\n          return;\n        },\n        onFailure: function onFailure(err) {\n          logger.debug('forgot password failure', err);\n          reject(err);\n          return;\n        },\n        inputVerificationCode: function inputVerificationCode(data) {\n          resolve(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Confirm a new password using a confirmation Code\n   * @param {String} username - The username\n   * @param {String} code - The confirmation code\n   * @param {String} password - The new password\n   * @return - A promise that resolves if success\n   */\n\n\n  AuthClass.prototype.forgotPasswordSubmit = function (username, code, password) {\n    if (!this.userPool) {\n      return Promise.reject('No userPool');\n    }\n\n    if (!username) {\n      return Promise.reject('Username cannot be empty');\n    }\n\n    if (!code) {\n      return Promise.reject('Code cannot be empty');\n    }\n\n    if (!password) {\n      return Promise.reject('Password cannot be empty');\n    }\n\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.confirmPassword(code, password, {\n        onSuccess: function onSuccess() {\n          resolve();\n          return;\n        },\n        onFailure: function onFailure(err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Get user information\n   * @async\n   * @return {Object }- current User's information\n   */\n\n\n  AuthClass.prototype.currentUserInfo = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            source = core_1.Credentials.getCredSource();\n            if (!(!source || source === 'aws' || source === 'userPool')) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.currentUserPoolUser().catch(function (err) {\n              return logger.debug(err);\n            })];\n\n          case 1:\n            user = _a.sent();\n\n            if (!user) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.userAttributes(user)];\n\n          case 3:\n            attributes = _a.sent();\n            userAttrs = this.attributesToObject(attributes);\n            credentials = null;\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.currentCredentials()];\n\n          case 5:\n            credentials = _a.sent();\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_10 = _a.sent();\n            logger.debug('Failed to retrieve credentials while getting current user info', e_10);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            info = {\n              'id': credentials ? credentials.identityId : undefined,\n              'username': user.getUsername(),\n              'attributes': userAttrs\n            };\n            return [2\n            /*return*/\n            , info];\n\n          case 8:\n            err_1 = _a.sent();\n            logger.debug('currentUserInfo error', err_1);\n            return [2\n            /*return*/\n            , {}];\n\n          case 9:\n            if (source === 'federated') {\n              user = this.user;\n              return [2\n              /*return*/\n              , user ? user : {}];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, e_11, token, identity_id, expires_at, credentials, currentUser;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config.identityPoolId && !this._config.userPoolId) {\n              throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n            } // Ensure backwards compatability\n\n\n            if (typeof providerOrOptions === 'undefined') {\n              if (this._config.identityPoolId && !this._config.userPoolId) {\n                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n              }\n            }\n\n            if (!(types_1.isFederatedSignInOptions(providerOrOptions) || types_1.isFederatedSignInOptionsCustom(providerOrOptions) || typeof providerOrOptions === 'undefined')) return [3\n            /*break*/\n            , 1];\n            options = providerOrOptions || {\n              provider: CognitoHostedUIIdentityProvider.Cognito\n            };\n            provider = types_1.isFederatedSignInOptions(options) ? options.provider : options.customProvider;\n            customState = types_1.isFederatedSignInOptions(options) ? options.customState : options.customState;\n\n            if (this._config.userPoolId) {\n              client_id = types_1.isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;\n              redirect_uri = types_1.isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;\n\n              this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n            }\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 1:\n            provider = providerOrOptions;\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.currentAuthenticatedUser()];\n\n          case 3:\n            loggedInUser = _a.sent();\n            logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n                You should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            e_11 = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n            return [4\n            /*yield*/\n            , core_1.Credentials.set({\n              provider: provider,\n              token: token,\n              identity_id: identity_id,\n              user: user,\n              expires_at: expires_at\n            }, 'federation')];\n\n          case 6:\n            credentials = _a.sent();\n            return [4\n            /*yield*/\n            , this.currentAuthenticatedUser()];\n\n          case 7:\n            currentUser = _a.sent();\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n            logger.debug('federated sign in credentials', credentials);\n            return [2\n            /*return*/\n            , credentials];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Used to complete the OAuth flow with or without the Cognito Hosted UI\n   * @param {String} URL - optional parameter for customers to pass in the response URL\n   */\n\n\n  AuthClass.prototype._handleAuthResponse = function (URL) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, _b, customState, err_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!this._config.userPoolId) {\n              throw new Error(\"OAuth responses require a User Pool defined in config\");\n            }\n\n            dispatchAuthEvent('parsingCallbackUrl', {\n              url: URL\n            }, \"The callback url is being parsed\");\n            currentUrl = URL || (core_1.JS.browserOrNode().isBrowser ? window.location.href : '');\n            hasCodeOrError = !!(url_1.parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var k = _a[0];\n              return k === 'code' || k === 'error';\n            });\n            hasTokenOrError = !!(url_1.parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var k = _a[0];\n              return k === 'access_token' || k === 'error';\n            });\n            if (!(hasCodeOrError || hasTokenOrError)) return [3\n            /*break*/\n            , 6];\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this._oAuthHandler.handleAuthResponse(currentUrl)];\n\n          case 2:\n            _a = _c.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n            session = new amazon_cognito_identity_js_1.CognitoUserSession({\n              IdToken: new amazon_cognito_identity_js_1.CognitoIdToken({\n                IdToken: idToken\n              }),\n              RefreshToken: new amazon_cognito_identity_js_1.CognitoRefreshToken({\n                RefreshToken: refreshToken\n              }),\n              AccessToken: new amazon_cognito_identity_js_1.CognitoAccessToken({\n                AccessToken: accessToken\n              })\n            });\n            credentials = void 0;\n            if (!this._config.identityPoolId) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , core_1.Credentials.set(session, 'session')];\n\n          case 3:\n            credentials = _c.sent();\n            logger.debug('AWS credentials', credentials);\n            _c.label = 4;\n\n          case 4:\n            isCustomStateIncluded = /-/.test(state);\n            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n            dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n\n            if (isCustomStateIncluded) {\n              _b = state.split('-'), customState = _b[1];\n              dispatchAuthEvent('customOAuthState', customState, \"State for user \" + currentUser.getUsername());\n            } // This calls cacheTokens() in Cognito SDK\n\n\n            currentUser.setSignInUserSession(session); //#endregion\n\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n\n            return [2\n            /*return*/\n            , credentials];\n\n          case 5:\n            err_2 = _c.sent();\n            logger.debug(\"Error in cognito hosted auth response\", err_2);\n            dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n            dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n            dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n            throw err_2;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  AuthClass.prototype.essentialCredentials = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  AuthClass.prototype.attributesToObject = function (attributes) {\n    var obj = {};\n\n    if (attributes) {\n      attributes.map(function (attribute) {\n        if (attribute.Value === 'true') {\n          obj[attribute.Name] = true;\n        } else if (attribute.Value === 'false') {\n          obj[attribute.Name] = false;\n        } else {\n          obj[attribute.Name] = attribute.Value;\n        }\n      });\n    }\n\n    return obj;\n  };\n\n  AuthClass.prototype.createCognitoUser = function (username) {\n    var userData = {\n      Username: username,\n      Pool: this.userPool\n    };\n    userData.Storage = this._storage;\n    var authenticationFlowType = this._config.authenticationFlowType;\n    var user = new amazon_cognito_identity_js_1.CognitoUser(userData);\n\n    if (authenticationFlowType) {\n      user.setAuthenticationFlowType(authenticationFlowType);\n    }\n\n    return user;\n  };\n\n  AuthClass.prototype._isValidAuthStorage = function (obj) {\n    // We need to check if the obj has the functions of Storage\n    return !!obj && typeof obj.getItem === 'function' && typeof obj.setItem === 'function' && typeof obj.removeItem === 'function' && typeof obj.clear === 'function';\n  };\n\n  return AuthClass;\n}();\n\nexports.default = AuthClass;","map":{"version":3,"sources":["../src/Auth.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAoBA,IAAA,MAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAYA,IAAA,4BAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAkBA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAM,MAAM,GAAG,IAAI,MAAA,CAAA,aAAJ,CAAW,WAAX,CAAf;AACA,IAAM,gBAAgB,GAAG,+BAAzB;AAEA,IAAM,cAAc,GAAK,OAAO,MAAP,KAAkB,WAAlB,IAAiC,OAAO,MAAM,CAAC,GAAd,KAAsB,UAAxD,GACpB,MAAM,CAAC,GAAP,CAAW,iBAAX,CADoB,GACY,mBADpC;;AAGA,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,KAAD,EAAe,IAAf,EAAyB,OAAzB,EAAuC;AAC7D,EAAA,MAAA,CAAA,GAAA,CAAI,QAAJ,CAAa,MAAb,EAAqB;AAAE,IAAA,KAAK,EAAA,KAAP;AAAS,IAAA,IAAI,EAAA,IAAb;AAAe,IAAA,OAAO,EAAA;AAAtB,GAArB,EAA+C,MAA/C,EAAuD,cAAvD;AACH,CAFD;;AAIA,IAAY,+BAAZ;;AAAA,CAAA,UAAY,+BAAZ,EAA2C;AACvC,EAAA,+BAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,+BAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,+BAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,+BAAA,CAAA,QAAA,CAAA,GAAA,iBAAA;AACH,CALD,EAAY,+BAA+B,GAA/B,OAAA,CAAA,+BAAA,KAAA,OAAA,CAAA,+BAAA,GAA+B,EAA/B,CAAZ;AAOA;;;;;AAGA,IAAA,SAAA;AAAA;AAAA,YAAA;AAQI;;;;AAIA,WAAA,SAAA,CAAY,MAAZ,EAA+B;AAA/B,QAAA,KAAA,GAAA,IAAA;;AAVQ,SAAA,QAAA,GAAW,IAAX;AACA,SAAA,IAAA,GAAY,IAAZ;AAUJ,SAAK,SAAL,CAAe,MAAf;AAEA,SAAK,sBAAL,GAA8B,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CAA9B;;AAEA,QAAI,MAAA,CAAA,GAAA,CAAI,MAAR,EAAgB;AACZ,MAAA,MAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,MAAX,CAAkB;AAAE,QAAA,eAAe,EAAE,MAAA,CAAA,SAAA,CAAU;AAA7B,OAAlB;AACH,KAFD,MAEO;AACH,MAAA,MAAM,CAAC,IAAP,CAAY,eAAZ;AACH;;AAED,IAAA,MAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,MAAX,EAAmB,UAAC,EAAD,EAAY;UAAT,OAAA,GAAA,EAAA,CAAA,O;AACV,UAAA,KAAA,GAAA,OAAA,CAAA,KAAA;;AACR,cAAQ,KAAR;AACI,aAAK,QAAL;AACI,UAAA,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,8BAAtB,EAAsD,OAAtD;;AACA;;AACJ,aAAK,SAAL;AACI,UAAA,KAAI,CAAC,QAAL,CAAc,UAAd,CAAyB,8BAAzB;;AACA;;AACJ,aAAK,iBAAL;AACI,UAAA,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,8BAAtB,EAAsD,MAAtD;;AACA;AATR;AAWH,KAbD;AAcH;;AAEM,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACI,WAAO,MAAP;AACH,GAFM;;AAIP,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAgB;AAAhB,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,CAAC,MAAL,EAAa,OAAO,KAAK,OAAL,IAAgB,EAAvB;AACb,IAAA,MAAM,CAAC,KAAP,CAAa,gBAAb;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,MAAA,CAAA,MAAA,CAAO,oBAAP,CAA4B,MAA5B,EAAoC,IAApE,EAA0E,MAA1E,CAAb;AACA,SAAK,OAAL,GAAe,IAAf;AACM,QAAA,EAAA,GAAA,KAAA,OAAA;AAAA,QACF,UAAA,GAAA,EAAA,CAAA,UADE;AAAA,QAEF,mBAAA,GAAA,EAAA,CAAA,mBAFE;AAAA,QAGF,aAAA,GAAA,EAAA,CAAA,aAHE;AAAA,QAIF,KAAA,GAAA,EAAA,CAAA,KAJE;AAAA,QAKF,MAAA,GAAA,EAAA,CAAA,MALE;AAAA,QAMF,cAAA,GAAA,EAAA,CAAA,cANE;AAAA,QAOF,eAAA,GAAA,EAAA,CAAA,eAPE;AAAA,QAQF,eAAA,GAAA,EAAA,CAAA,eARE;AAAA,QASF,kBAAA,GAAA,EAAA,CAAA,kBATE;;AAYN,QAAI,CAAC,KAAK,OAAL,CAAa,OAAlB,EAA2B;AACvB;AACA,UAAI,aAAJ,EAAmB,KAAK,QAAL,GAAgB,IAAI,4BAAA,CAAA,aAAJ,CAAkB,aAAlB,CAAhB,CAAnB,KACK;AACD,aAAK,QAAL,GAAgB,IAAI,MAAA,CAAA,aAAJ,GAAoB,UAApB,EAAhB;AACH;AACJ,KAND,MAMO;AACH,UAAI,CAAC,KAAK,mBAAL,CAAyB,KAAK,OAAL,CAAa,OAAtC,CAAL,EAAqD;AACjD,QAAA,MAAM,CAAC,KAAP,CAAa,8CAAb;AACA,cAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,WAAK,QAAL,GAAgB,KAAK,OAAL,CAAa,OAA7B;AACH;;AAED,SAAK,YAAL,GAAoB,OAAO,CAAC,OAAR,EAApB;;AACA,QAAI,OAAO,KAAK,QAAL,CAAc,MAAd,CAAP,KAAiC,UAArC,EAAiD;AAC7C,WAAK,YAAL,GAAoB,KAAK,QAAL,CAAc,MAAd,GAApB;AACH;;AAED,QAAI,UAAJ,EAAgB;AACZ,UAAM,YAAY,GAAyB;AACvC,QAAA,UAAU,EAAE,UAD2B;AAEvC,QAAA,QAAQ,EAAE;AAF6B,OAA3C;AAIA,MAAA,YAAY,CAAC,OAAb,GAAuB,KAAK,QAA5B;AAEA,WAAK,QAAL,GAAgB,IAAI,4BAAA,CAAA,eAAJ,CAAoB,YAApB,CAAhB;AACH;;AAED,IAAA,MAAA,CAAA,WAAA,CAAY,SAAZ,CAAsB;AAClB,MAAA,eAAe,EAAA,eADG;AAElB,MAAA,MAAM,EAAE,kBAAkB,IAAI,MAFZ;AAGlB,MAAA,UAAU,EAAA,UAHQ;AAIlB,MAAA,cAAc,EAAA,cAJI;AAKlB,MAAA,eAAe,EAAA,eALG;AAMlB,MAAA,OAAO,EAAE,KAAK;AANI,KAAtB,EA9CY,CAuDZ;AACA;;AACA,QAAM,qBAAqB,GAAG,KAAK,GAAG,OAAA,CAAA,mBAAA,CAAoB,KAAK,OAAL,CAAa,KAAjC,IAChC,KADgC,GAClB,KAAM,CAAC,UADQ,GAE7B,SAFN;;AAIA,QAAI,qBAAJ,EAA2B;AACvB,UAAM,iBAAiB,GAAG,MAAM,CAAC,MAAP,CACtB;AACI,QAAA,eAAe,EAAE,mBADrB;AAEI,QAAA,UAAU,EAAE,UAFhB;AAGI,QAAA,MAAM,EAAE,qBAAqB,CAAC,QAAD,CAHjC;AAII,QAAA,MAAM,EAAE,qBAAqB,CAAC,OAAD,CAJjC;AAKI,QAAA,cAAc,EAAE,qBAAqB,CAAC,gBAAD,CALzC;AAMI,QAAA,eAAe,EAAE,qBAAqB,CAAC,iBAAD,CAN1C;AAOI,QAAA,YAAY,EAAE,qBAAqB,CAAC,cAAD,CAPvC;AAQI,QAAA,OAAO,EAAE,KAAK,QARlB;AASI,QAAA,SAAS,EAAE,qBAAqB,CAAC,WAAD;AATpC,OADsB,EAYtB,qBAAqB,CAAC,SAAD,CAZC,CAA1B;AAeA,WAAK,aAAL,GAAqB,IAAI,OAAA,CAAA,OAAJ,CAAU;AAC3B,QAAA,MAAM,EAAE,iBAAiB,CAAC,MADC;AAE3B,QAAA,MAAM,EAAE,iBAFmB;AAG3B,QAAA,eAAe,EAAE,iBAAiB,CAAC;AAHR,OAAV,CAArB,CAhBuB,CAsBvB;;AACA,MAAA,aAAA,CAAA,OAAA,CAAY,UAAC,EAAD,EAAQ;YAAL,GAAA,GAAA,EAAA,CAAA,G;;AACX,QAAA,KAAI,CAAC,mBAAL,CAAyB,GAAzB;AACH,OAFD;AAGH;;AAED,IAAA,iBAAiB,CACb,YADa,EAEb,IAFa,EAGb,oDAHa,CAAjB;AAKA,WAAO,KAAK,OAAZ;AACH,GA/FD;AAiGA;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EAA2C;AAA3C,QAAA,KAAA,GAAA,IAAA;;AAA6C,QAAA,WAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAwB;AAAxB,MAAA,WAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACzC,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAE7D,QAAI,QAAQ,GAAW,IAAvB;AACA,QAAI,QAAQ,GAAW,IAAvB;AACA,QAAM,UAAU,GAAa,EAA7B;AACA,QAAI,cAAc,GAAa,IAA/B;;AACA,QAAI,MAAM,IAAI,OAAO,MAAP,KAAkB,QAAhC,EAA0C;AACtC,MAAA,QAAQ,GAAG,MAAX;AACA,MAAA,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,CAAD,CAAd,GAAoB,IAA1C;AACA,UAAM,KAAK,GAAW,WAAW,GAAG,WAAW,CAAC,CAAD,CAAd,GAAoB,IAArD;AACA,UAAM,YAAY,GAAW,WAAW,GAAG,WAAW,CAAC,CAAD,CAAd,GAAoB,IAA5D;AACA,UAAI,KAAJ,EAAW,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,IAAI,EAAE,OAAR;AAAiB,QAAA,KAAK,EAAE;AAAxB,OAAhB;AACX,UAAI,YAAJ,EAAkB,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,IAAI,EAAE,cAAR;AAAwB,QAAA,KAAK,EAAE;AAA/B,OAAhB;AACrB,KAPD,MAOO,IAAI,MAAM,IAAI,OAAO,MAAP,KAAkB,QAAhC,EAA0C;AAC7C,MAAA,QAAQ,GAAG,MAAM,CAAC,UAAD,CAAjB;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,UAAD,CAAjB;AACA,UAAM,OAAK,GAAG,MAAM,CAAC,YAAD,CAApB;;AACA,UAAI,OAAJ,EAAW;AACP,QAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAmB,GAAnB,CAAuB,UAAA,GAAA,EAAG;AACtB,cAAM,GAAG,GAAW;AAAE,YAAA,IAAI,EAAE,GAAR;AAAa,YAAA,KAAK,EAAE,OAAK,CAAC,GAAD;AAAzB,WAApB;AACA,UAAA,UAAU,CAAC,IAAX,CAAgB,GAAhB;AACH,SAHD;AAIH;;AACD,MAAA,cAAc,GAAG,MAAM,CAAC,gBAAD,CAAN,IAA4B,IAA7C;AACH,KAXM,MAWA;AACH,aAAO,OAAO,CAAC,MAAR,CAAe,gEAAf,CAAP;AACH;;AAED,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AACrE,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AAErE,IAAA,MAAM,CAAC,KAAP,CAAa,eAAb,EAA8B,UAA9B;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,cAAxC;AAGA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,KAAI,CAAC,QAAL,CAAc,MAAd,CAAqB,QAArB,EAA+B,QAA/B,EAAyC,UAAzC,EAAqD,cAArD,EAAqE,UAAC,GAAD,EAAM,IAAN,EAAU;AAC3E,YAAI,GAAJ,EAAS;AACL,UAAA,iBAAiB,CACb,gBADa,EAEb,GAFa,EAGV,QAAQ,GAAA,mBAHE,CAAjB;AAKA,UAAA,MAAM,CAAC,GAAD,CAAN;AACH,SAPD,MAOO;AACH,UAAA,iBAAiB,CACb,QADa,EAEb,IAFa,EAGV,QAAQ,GAAA,6BAHE,CAAjB;AAKA,UAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,OAhBD;AAiBH,KAlBM,CAAP;AAmBH,GAvDM;AAyDP;;;;;;;;;AAOO,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,QAArB,EAAuC,IAAvC,EAAqD,OAArD,EAAmF;AAC/E,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AACrE,QAAI,CAAC,IAAL,EAAW;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,sBAAf,CAAP;AAAgD;;AAE7D,QAAM,IAAI,GAAG,KAAK,iBAAL,CAAuB,QAAvB,CAAb;AACA,QAAM,kBAAkB,GAAG,OAAO,IAAI,OAAO,OAAO,CAAC,kBAAf,KAAsC,SAAjD,GACrB,OAAO,CAAC,kBADa,GACQ,IADnC;AAGA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,mBAAL,CAAyB,IAAzB,EAA+B,kBAA/B,EAAmD,UAAC,GAAD,EAAM,IAAN,EAAU;AACzD,YAAI,GAAJ,EAAS;AAAE,UAAA,MAAM,CAAC,GAAD,CAAN;AAAc,SAAzB,MAA+B;AAAE,UAAA,OAAO,CAAC,IAAD,CAAP;AAAgB;AACpD,OAFD;AAGH,KAJM,CAAP;AAKH,GAdM;AAgBP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,QAApB,EAAoC;AAChC,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AAErE,QAAM,IAAI,GAAG,KAAK,iBAAL,CAAuB,QAAvB,CAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,sBAAL,CAA4B,UAAC,GAAD,EAAM,IAAN,EAAU;AAClC,YAAI,GAAJ,EAAS;AAAE,UAAA,MAAM,CAAC,GAAD,CAAN;AAAc,SAAzB,MAA+B;AAAE,UAAA,OAAO,CAAC,IAAD,CAAP;AAAgB;AACpD,OAFD;AAGH,KAJM,CAAP;AAKH,GAVM;AAYP;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,oBAAd,EAAyD,EAAzD,EAAoE;AAChE,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAI,QAAQ,GAAG,IAAf;AACA,QAAI,QAAQ,GAAG,IAAf;AACA,QAAI,cAAc,GAAG,EAArB,CAJgE,CAKhE;;AACA,QAAI,OAAO,oBAAP,KAAgC,QAApC,EAA8C;AAC1C,MAAA,QAAQ,GAAG,oBAAX;AACA,MAAA,QAAQ,GAAG,EAAX;AACH,KAHD,MAGO,IAAI,OAAA,CAAA,sBAAA,CAAuB,oBAAvB,CAAJ,EAAkD;AACrD,UAAI,OAAO,EAAP,KAAc,WAAlB,EAA+B;AAC3B,QAAA,MAAM,CAAC,IAAP,CAAY,kEAAZ;AACH;;AACD,MAAA,QAAQ,GAAG,oBAAoB,CAAC,QAAhC;AACA,MAAA,QAAQ,GAAG,oBAAoB,CAAC,QAAhC;AACA,MAAA,cAAc,GAAG,oBAAoB,CAAC,cAAtC;AACH,KAPM,MAOA;AACH,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,oEAAV,CAAf,CAAP;AACH;;AACD,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AACrE,QAAM,WAAW,GAAG,IAAI,4BAAA,CAAA,qBAAJ,CAA0B;AAC1C,MAAA,QAAQ,EAAE,QADgC;AAE1C,MAAA,QAAQ,EAAE,QAFgC;AAG1C,MAAA,cAAc,EAAE;AAH0B,KAA1B,CAApB;;AAKA,QAAI,QAAJ,EAAc;AACV,aAAO,KAAK,kBAAL,CAAwB,WAAxB,CAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAK,qBAAL,CAA2B,WAA3B,CAAP;AACH;AACJ,GA9BM;AAgCP;;;;;;;;;AAOQ,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UACI,IADJ,EAEI,OAFJ,EAEkD,MAFlD,EAE+E;AAF/E,QAAA,KAAA,GAAA,IAAA;;AAII,QAAM,IAAI,GAAG,IAAb;AACA,WAAO;AACH,MAAA,SAAS,EAAE,mBAAO,OAAP,EAAc;AAAA,eAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrB,gBAAA,MAAM,CAAC,KAAP,CAAa,OAAb;AACA,uBAAQ,IAAI,CAAC,eAAD,CAAZ;AACA,uBAAQ,IAAI,CAAC,gBAAD,CAAZ;;;;;;AAEI,uBAAA,CAAA;AAAA;AAAA,kBAAM,MAAA,CAAA,WAAA,CAAY,KAAZ,EAAN,CAAA;;;AAAA,gBAAA,EAAA,CAAA,IAAA;;AACa,uBAAA,CAAA;AAAA;AAAA,kBAAM,MAAA,CAAA,WAAA,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,SAAzB,CAAN,CAAA;;;AAAP,gBAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACN,gBAAA,MAAM,CAAC,KAAP,CAAa,oCAAb,EAAmD,IAAnD;;;;;;;AAEA,gBAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,GAA/C;;;;;;;;AAKwB,uBAAA,CAAA;AAAA;AAAA,kBAAM,KAAK,mBAAL,EAAN,CAAA;;;AAAd,gBAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AACN,gBAAA,IAAI,CAAC,IAAL,GAAY,WAAZ;AACA,gBAAA,iBAAiB,CACjB,QADiB,EAEjB,WAFiB,EAGjB,YAAU,IAAI,CAAC,WAAL,EAAV,GAA4B,qBAHX,CAAjB;AAKA,gBAAA,OAAO,CAAC,WAAD,CAAP;;;;;;;AAEA,gBAAA,MAAM,CAAC,KAAP,CAAa,kCAAb,EAAiD,GAAjD;AACA,gBAAA,MAAM,CAAC,GAAD,CAAN;;;;;;;;;;;;;;;;SAxBa,CAAA;AA2BxB,OA5BE;AA6BH,MAAA,SAAS,EAAE,mBAAC,GAAD,EAAI;AACX,QAAA,MAAM,CAAC,KAAP,CAAa,gBAAb,EAA+B,GAA/B;AACA,QAAA,iBAAiB,CACb,gBADa,EAEb,GAFa,EAGV,IAAI,CAAC,WAAL,KAAkB,mBAHR,CAAjB;AAKA,QAAA,MAAM,CAAC,GAAD,CAAN;AACH,OArCE;AAsCH,MAAA,eAAe,EAAE,yBAAC,cAAD,EAAe;AAC5B,QAAA,MAAM,CAAC,KAAP,CAAa,yCAAb;AACA,QAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,kBAAxB;AACA,QAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACH,OA3CE;AA4CH,MAAA,WAAW,EAAE,qBAAC,aAAD,EAAgB,cAAhB,EAA8B;AACvC,QAAA,MAAM,CAAC,KAAP,CAAa,qBAAb;AACA,QAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,aAAxB;AACA,QAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAjDE;AAkDH,MAAA,QAAQ,EAAE,kBAAC,aAAD,EAAgB,cAAhB,EAA8B;AACpC,QAAA,MAAM,CAAC,KAAP,CAAa,kBAAb,EAAiC,aAAjC;AACA,QAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,aAAxB;AACA,QAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAvDE;AAwDH,MAAA,mBAAmB,EAAE,6BAAC,cAAD,EAAiB,kBAAjB,EAAmC;AACpD,QAAA,MAAM,CAAC,KAAP,CAAa,qBAAb;AACA,QAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,uBAAxB;AACA,QAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB;AACrB,UAAA,cAAc,EAAA,cADO;AAErB,UAAA,kBAAkB,EAAA;AAFG,SAAzB;AAIA,QAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAhEE;AAiEH,MAAA,YAAY,EAAE,sBAAC,aAAD,EAAgB,cAAhB,EAA8B;AACxC,QAAA,MAAM,CAAC,KAAP,CAAa,qBAAb;AACA,QAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,aAAxB;AACA,QAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAtEE;AAuEH,MAAA,aAAa,EAAE,uBAAC,aAAD,EAAgB,cAAhB,EAA8B;AACzC,QAAA,MAAM,CAAC,KAAP,CAAa,sBAAb,EAAqC,aAArC;AACA,QAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,aAAxB;AACA,QAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,QAAA,OAAO,CAAC,IAAD,CAAP;AACH;AA5EE,KAAP;AA8EH,GAnFO;AAqFR;;;;;;;;AAMQ,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,WAA3B,EAA6D;AAA7D,QAAA,KAAA,GAAA,IAAA;;AACI,QAAM,IAAI,GAAG,KAAK,iBAAL,CAAuB,WAAW,CAAC,WAAZ,EAAvB,CAAb;AAEA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,gBAAL,CAAsB,WAAtB,EAAmC,KAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,OAAzB,EAAkC,MAAlC,CAAnC;AACH,KAFM,CAAP;AAGH,GANO;AAQR;;;;;;;;AAMQ,EAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,UAA8B,WAA9B,EAAgE;AAAhE,QAAA,KAAA,GAAA,IAAA;;AACI,QAAM,IAAI,GAAG,KAAK,iBAAL,CAAuB,WAAW,CAAC,WAAZ,EAAvB,CAAb;AACA,IAAA,IAAI,CAAC,yBAAL,CAA+B,aAA/B;AAEA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,YAAL,CAAkB,WAAlB,EAA+B,KAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,OAAzB,EAAkC,MAAlC,CAA/B;AACH,KAFM,CAAP;AAGH,GAPO;AASR;;;;;;;;;AAOO,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAA4C;AACxC,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAgB;AAC/B,YAAI,GAAJ,EAAS;AACL,UAAA,MAAM,CAAC,KAAP,CAAa,wBAAb,EAAuC,GAAvC;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH;;AACD,QAAA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,UAAxC;AACA,QAAA,GAAG,CAAC,UAAD,CAAH;AACA;AACH,OATD;AAUH,KAXM,CAAP;AAYH,GAbM;AAeP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAAgD,MAAhD,EAA4E;AACxE,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,UAAM,WAAW,GAAG,MAAM,GAAE,MAAM,CAAC,WAAT,GAAsB,KAAhD;AACA,MAAA,IAAI,CAAC,WAAL,CACI,UAAC,GAAD,EAAM,IAAN,EAAU;AACN,YAAI,GAAJ,EAAS;AACL,UAAA,MAAM,CAAC,KAAP,CAAa,8BAAb,EAA6C,GAA7C;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH;;AAED,YAAM,OAAO,GAAG,IAAI,CAAC,uBAAL,CAA6B,IAA7B,CAAhB;;AACA,YAAI,CAAC,OAAL,EAAc;AACV,UAAA,GAAG,CAAC,kBAAD,CAAH;AACA;AACH,SAHD,MAGO;AACH,UAAA,GAAG,CAAC,OAAD,CAAH;AACA;AACH;AACJ,OAhBL,EAiBI;AAAE,QAAA,WAAW,EAAA;AAAb,OAjBJ;AAmBH,KArBM,CAAP;AAsBH,GAxBM;;AA0BC,EAAA,SAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,UAAgC,IAAhC,EAAoC;AAChC,QAAI,GAAG,GAAG,IAAV;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,mBAA1B,CAFgC,CAGhC;AACA;;AACA,QAAI,YAAJ,EAAkB;AACd,MAAA,GAAG,GAAG,YAAN;AACH,KAFD,MAEO;AACH;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,kBAArB;;AACA,UAAI,CAAC,OAAL,EAAc;AACV;AACA;AACA;AACA;AACA,YAAM,UAAU,GAAG,IAAI,CAAC,UAAxB;;AACA,YAAI,UAAJ,EAAgB;AACZ,UAAA,GAAG,GAAG,SAAN;AACH,SAFD,MAEO;AACH,UAAA,GAAG,GAAG,OAAN;AACH;AACJ,OAXD,MAWO,IAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AAC7B,QAAA,GAAG,GAAG,OAAN;AACH,OAFM,MAEA;AACH,QAAA,MAAM,CAAC,KAAP,CAAa,kCAAb,EAAiD,IAAjD;AACH;AACJ;;AACD,WAAO,GAAP;AACH,GA5BO;;AA8BA,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,IAArB,EAA2B,MAA3B,EAAiC;AAC7B,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,WAAL,CACI,UAAC,GAAD,EAAM,IAAN,EAAU;AACN,YAAI,GAAJ,EAAS;AACL,UAAA,MAAM,CAAC,KAAP,CAAa,0BAAb,EAAyC,GAAzC;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH,SAJD,MAIO;AACH,UAAA,GAAG,CAAC,IAAD,CAAH;AACA;AACH;AACJ,OAVL,EAWI,MAXJ;AAaH,KAdM,CAAP;AAgBH,GAjBO;AAmBR;;;;;;;;AAMa,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAb,UAA6B,IAA7B,EAAsD,SAAtD,EAAyF;;;;;;;AACpE,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAL,CAAkB,IAAlB,EAAwB;AAAE,cAAA,WAAW,EAAE;AAAf,aAAxB,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACF,YAAA,cAAc,GAAG,IAAjB;AACA,YAAA,eAAe,GAAG,IAAlB;AAEI,YAAA,EAAA,GAAA,SAAA;;;mBACC,UAAU,oB;AAAV,uBAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;mBAMA,SAAS,S;AAAT,uBAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;mBAMA,O;AAAA,uBAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;;;;;;;AAXD,YAAA,eAAe,GAAG;AACd,cAAA,YAAY,EAAE,IADA;AAEd,cAAA,OAAO,EAAE;AAFK,aAAlB;AAIA,mBAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;AAEA,YAAA,cAAc,GAAG;AACb,cAAA,YAAY,EAAE,IADD;AAEb,cAAA,OAAO,EAAE;AAFI,aAAjB;AAIA,mBAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;AAEM,YAAA,OAAO,GAAG,QAAQ,CAAC,oBAAD,CAAlB;AACiB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,uBAAL,CAA6B,QAA7B,CAAN,CAAA;;;AAAjB,YAAA,cAAc,GAAG,EAAA,CAAA,IAAA,EAAjB;;AACN,gBAAI,cAAc,KAAK,OAAvB,EAAgC;AAC5B,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,OAAR,CAAgB,wBAAhB,CAAP,CAAA;AACH,aAFD,MAEO,IAAI,cAAc,KAAK,SAAvB,EAAkC;AACrC,cAAA,cAAc,GAAG;AACb,gBAAA,YAAY,EAAE,KADD;AAEb,gBAAA,OAAO,EAAE;AAFI,eAAjB;AAIH,aALM,MAKA,IAAI,cAAc,KAAK,oBAAvB,EAA6C;AAChD,cAAA,eAAe,GAAG;AACd,gBAAA,YAAY,EAAE,KADA;AAEd,gBAAA,OAAO,EAAE;AAFK,eAAlB;AAIH,aALM,MAKA;AACH,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,kBAAf,CAAP,CAAA;AACH,a,CACD;AACA;;;AACA,gBAAI,OAAO,IAAI,OAAO,CAAC,MAAR,KAAmB,CAAlC,EAAqC;AACjC;AACA,cAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,OAAA,EAAO;AACnB,oBAAI,OAAO,KAAK,SAAhB,EAA2B;AACvB,kBAAA,cAAc,GAAG;AACb,oBAAA,YAAY,EAAE,KADD;AAEb,oBAAA,OAAO,EAAE;AAFI,mBAAjB;AAIH,iBALD,MAKO,IAAI,OAAO,KAAK,oBAAhB,EAAsC;AACzC,kBAAA,eAAe,GAAG;AACd,oBAAA,YAAY,EAAE,KADA;AAEd,oBAAA,OAAO,EAAE;AAFK,mBAAlB;AAIH;AACJ,eAZD;AAaH;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,6BAAb;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,6BAAf,CAAP,CAAA;;;AAGF,YAAA,IAAI,GAAG,IAAP;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,OAAJ,CAAoB,UAAC,GAAD,EAAM,GAAN,EAAS;AAChC,cAAA,IAAI,CAAC,oBAAL,CAA0B,cAA1B,EAA0C,eAA1C,EAA2D,UAAC,GAAD,EAAM,MAAN,EAAY;AACnE,oBAAI,GAAJ,EAAS;AACL,kBAAA,MAAM,CAAC,KAAP,CAAa,+BAAb,EAA8C,GAA9C;AACA,yBAAO,GAAG,CAAC,GAAD,CAAV;AACH;;AACD,gBAAA,MAAM,CAAC,KAAP,CAAa,sBAAb,EAAqC,MAArC;AACA,gBAAA,MAAM,CAAC,KAAP,CAAa,yCAAb,EANmE,CAOnE;;AACA,gBAAA,IAAI,CAAC,WAAL,CACI,UAAC,GAAD,EAAM,IAAN,EAAU;AACN,sBAAI,GAAJ,EAAS;AACL,oBAAA,MAAM,CAAC,KAAP,CAAa,0BAAb,EAAyC,GAAzC;AACA,2BAAO,GAAG,CAAC,GAAD,CAAV;AACH,mBAHD,MAGO;AACH,2BAAO,GAAG,CAAC,MAAD,CAAV;AACH;AACJ,iBARL,EASI;AAAC,kBAAA,WAAW,EAAE;AAAd,iBATJ;AAWH,eAnBD;AAoBH,aArBM,CAAP,CAAA;;;;AAsBH,GAnFY;AAqFb;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAAmC;AAC/B,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,UAAL,CAAgB,UAAC,GAAD,EAAM,IAAN,EAAU;AACtB,YAAI,GAAJ,EAAS;AACL,UAAA,MAAM,CAAC,KAAP,CAAa,oBAAb,EAAmC,GAAnC;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH;;AACD,QAAA,MAAM,CAAC,KAAP,CAAa,qBAAb,EAAoC,IAApC;AACA,QAAA,GAAG,CAAC,IAAD,CAAH;AACA;AACH,OATD;AAUH,KAXM,CAAP;AAYH,GAbM;AAeP;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,IAAjB,EAAkC;AAC9B,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,SAAL,CAAe,UAAC,GAAD,EAAM,IAAN,EAAU;AACrB,YAAI,GAAJ,EAAS;AACL,UAAA,MAAM,CAAC,KAAP,CAAa,mBAAb,EAAkC,GAAlC;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH;;AACD,QAAA,MAAM,CAAC,KAAP,CAAa,oBAAb,EAAmC,IAAnC;AACA,QAAA,GAAG,CAAC,IAAD,CAAH;AACA;AACH,OATD;AAUH,KAXM,CAAP;AAYH,GAbM;AAeP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,IAAjB,EAAwC;AACpC,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,sBAAL,CAA4B;AACxB,QAAA,SAAS,EAAE,mBAAC,GAAD,EAAI;AACX,UAAA,MAAM,CAAC,KAAP,CAAa,+BAAb,EAA8C,GAA9C;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH,SALuB;AAMxB,QAAA,mBAAmB,EAAE,6BAAC,UAAD,EAAW;AAC5B,UAAA,MAAM,CAAC,KAAP,CAAa,+BAAb,EAA8C,UAA9C;AACA,UAAA,GAAG,CAAC,UAAD,CAAH;AACA;AACH;AAVuB,OAA5B;AAYH,KAbM,CAAP;AAcH,GAfM;AAiBP;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAAgD,eAAhD,EAAuE;AACnE,IAAA,MAAM,CAAC,KAAP,CAAa,wBAAb,EAAuC,IAAvC,EAA6C,eAA7C;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,mBAAL,CAAyB,eAAzB,EAA0C,gBAA1C,EAA4D;AACxD,QAAA,SAAS,EAAE,mBAAC,GAAD,EAAI;AACX,UAAA,MAAM,CAAC,KAAP,CAAa,wBAAb,EAAuC,GAAvC;AACA,UAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH,SALuD;AAMxD,QAAA,SAAS,EAAE,mBAAC,IAAD,EAAK;AACZ,UAAA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,IAAxC;AACA,UAAA,GAAG,CAAC,IAAD,CAAH;AACA;AACH;AAVuD,OAA5D;AAYH,KAbM,CAAP;AAcH,GAhBM;AAkBP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UACI,IADJ,EAEI,IAFJ,EAGI,OAHJ,EAGqD;AAHrD,QAAA,KAAA,GAAA,IAAA;;AAKI,QAAI,CAAC,IAAL,EAAW;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,sBAAf,CAAP;AAAgD;;AAE7D,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,WAAL,CACI,IADJ,EACU;AACF,QAAA,SAAS,EAAE,mBAAO,OAAP,EAAc;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrB,kBAAA,MAAM,CAAC,KAAP,CAAa,OAAb;;;;;;AAEI,yBAAA,CAAA;AAAA;AAAA,oBAAM,MAAA,CAAA,WAAA,CAAY,KAAZ,EAAN,CAAA;;;AAAA,kBAAA,EAAA,CAAA,IAAA;;AACa,yBAAA,CAAA;AAAA;AAAA,oBAAM,MAAA,CAAA,WAAA,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,SAAzB,CAAN,CAAA;;;AAAP,kBAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACN,kBAAA,MAAM,CAAC,KAAP,CAAa,oCAAb,EAAmD,IAAnD;;;;;;;AAEA,kBAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,GAA/C;;;;;;AAEA,kBAAA,IAAI,CAAC,IAAL,GAAY,IAAZ;AAEA,kBAAA,iBAAiB,CACb,QADa,EAEb,IAFa,EAGV,IAAI,GAAA,gBAHM,CAAjB;AAKA,kBAAA,OAAO,CAAC,IAAD,CAAP;;;;;;;;;;;WAhBiB,CAAA;AAkBxB,SAnBC;AAoBF,QAAA,SAAS,EAAE,mBAAC,GAAD,EAAI;AACX,UAAA,MAAM,CAAC,KAAP,CAAa,wBAAb,EAAuC,GAAvC;AACA,UAAA,MAAM,CAAC,GAAD,CAAN;AACH;AAvBC,OADV,EA0BI,OA1BJ;AA2BH,KA5BM,CAAP;AA6BH,GArCM;;AAuCA,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UACI,IADJ,EAEI,QAFJ,EAGI,kBAHJ,EAG2B;AAH3B,QAAA,KAAA,GAAA,IAAA;;AAKI,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AAErE,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,4BAAL,CAAkC,QAAlC,EAA4C,kBAA5C,EAAgE;AAC5D,QAAA,SAAS,EAAE,mBAAO,OAAP,EAAc;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACrB,kBAAA,MAAM,CAAC,KAAP,CAAa,OAAb;;;;;;AAEI,yBAAA,CAAA;AAAA;AAAA,oBAAM,MAAA,CAAA,WAAA,CAAY,KAAZ,EAAN,CAAA;;;AAAA,kBAAA,EAAA,CAAA,IAAA;;AACa,yBAAA,CAAA;AAAA;AAAA,oBAAM,MAAA,CAAA,WAAA,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,SAAzB,CAAN,CAAA;;;AAAP,kBAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACN,kBAAA,MAAM,CAAC,KAAP,CAAa,oCAAb,EAAmD,IAAnD;;;;;;;AAEA,kBAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,GAA/C;;;;;;AAEA,kBAAA,IAAI,CAAC,IAAL,GAAY,IAAZ;AACA,kBAAA,iBAAiB,CACb,QADa,EAEb,IAFa,EAEJ,IAAI,GAAA,gBAFA,CAAjB;AAIA,kBAAA,OAAO,CAAC,IAAD,CAAP;;;;;;;;;;;WAdiB,CAAA;AAgBxB,SAjB2D;AAkB5D,QAAA,SAAS,EAAE,mBAAC,GAAD,EAAI;AACX,UAAA,MAAM,CAAC,KAAP,CAAa,6BAAb,EAA4C,GAA5C;AACA,UAAA,iBAAiB,CACb,6BADa,EAEb,GAFa,EAGV,KAAI,CAAC,IAAL,GAAS,2CAHC,CAAjB;AAKA,UAAA,MAAM,CAAC,GAAD,CAAN;AACH,SA1B2D;AA2B5D,QAAA,WAAW,EAAE,qBAAC,aAAD,EAAgB,cAAhB,EAA8B;AACvC,UAAA,MAAM,CAAC,KAAP,CAAa,qBAAb;AACA,UAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,aAAxB;AACA,UAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,UAAA,OAAO,CAAC,IAAD,CAAP;AACH,SAhC2D;AAiC5D,QAAA,QAAQ,EAAE,kBAAC,aAAD,EAAgB,cAAhB,EAA8B;AACpC,UAAA,MAAM,CAAC,KAAP,CAAa,kBAAb,EAAiC,aAAjC;AACA,UAAA,IAAI,CAAC,eAAD,CAAJ,GAAwB,aAAxB;AACA,UAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,cAAzB;AACA,UAAA,OAAO,CAAC,IAAD,CAAP;AACH;AAtC2D,OAAhE;AAwCH,KAzCM,CAAP;AA0CH,GAlDM;AAoDP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,IAAjC,EAA0D,kBAA1D,EAAoF;AAApF,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAI,CAAC,kBAAL,EAAyB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,oCAAf,CAAP;AAA8D;;AAEzF,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,yBAAL,CAA+B,kBAA/B,EAAmD,KAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,OAAzB,EAAkC,MAAlC,CAAnD;AACH,KAFM,CAAP;AAGH,GARM;AAUP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,IAA5B,EAAqD,UAArD,EAAuE;AACnE,QAAM,aAAa,GAAgC,EAAnD;AACA,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAA,EAAO;AAC/B,aAAK,IAAM,GAAX,IAAkB,UAAlB,EAA8B;AAC1B,cAAI,GAAG,KAAK,KAAR,IACA,GAAG,CAAC,OAAJ,CAAY,WAAZ,IAA2B,CAD/B,EACkC;AAC9B,gBAAM,IAAI,GAA8B;AACpC,sBAAQ,GAD4B;AAEpC,uBAAS,UAAU,CAAC,GAAD;AAFiB,aAAxC;AAIA,YAAA,aAAa,CAAC,IAAd,CAAmB,IAAnB;AACH;AACJ;;AACD,QAAA,IAAI,CAAC,gBAAL,CAAsB,aAAtB,EAAqC,UAAC,GAAD,EAAM,MAAN,EAAY;AAC7C,cAAI,GAAJ,EAAS;AAAE,mBAAO,MAAM,CAAC,GAAD,CAAb;AAAqB,WAAhC,MAAsC;AAAE,mBAAO,OAAO,CAAC,MAAD,CAAd;AAAyB;AACpE,SAFD;AAGH,OAdD;AAeH,KAhBM,CAAP;AAiBH,GApBM;AAqBP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA6C;AAA7C,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,KAAI,CAAC,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAA,EAAO;AAC/B,QAAA,IAAI,CAAC,iBAAL,CAAuB,UAAC,GAAD,EAAM,UAAN,EAAgB;AACnC,cAAI,GAAJ,EAAS;AAAE,YAAA,MAAM,CAAC,GAAD,CAAN;AAAc,WAAzB,MAA+B;AAAE,YAAA,OAAO,CAAC,UAAD,CAAP;AAAsB;AAC1D,SAFD;AAGH,OAJD;AAKH,KANM,CAAP;AAOH,GARM;;AAUA,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAA8C;AAC1C,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,KAAK,cAAL,CAAoB,IAApB,EACF,IADE,CACG,UAAA,UAAA,EAAU;AACZ,UAAM,KAAK,GAAG,IAAI,CAAC,kBAAL,CAAwB,UAAxB,CAAd;AACA,UAAM,UAAU,GAAG,EAAnB;AACA,UAAM,QAAQ,GAAG,EAAjB;;AACA,UAAI,KAAK,CAAC,OAAD,CAAT,EAAoB;AAChB,YAAI,KAAK,CAAC,gBAAD,CAAT,EAA6B;AACzB,UAAA,QAAQ,CAAC,OAAD,CAAR,GAAoB,KAAK,CAAC,OAAD,CAAzB;AACH,SAFD,MAEO;AACH,UAAA,UAAU,CAAC,OAAD,CAAV,GAAsB,KAAK,CAAC,OAAD,CAA3B;AACH;AACJ;;AACD,UAAI,KAAK,CAAC,cAAD,CAAT,EAA2B;AACvB,YAAI,KAAK,CAAC,uBAAD,CAAT,EAAoC;AAChC,UAAA,QAAQ,CAAC,cAAD,CAAR,GAA2B,KAAK,CAAC,cAAD,CAAhC;AACH,SAFD,MAEO;AACH,UAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,KAAK,CAAC,cAAD,CAAlC;AACH;AACJ;;AACD,aAAO;AACH,QAAA,QAAQ,EAAA,QADL;AAEH,QAAA,UAAU,EAAA;AAFP,OAAP;AAIH,KAvBE,CAAP;AAwBH,GA1BM;AA4BP;;;;;;AAIO,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,MAA3B,EAAmD;AAAnD,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,YAAA;AACnB,YAAM,IAAI,GAAG,IAAI,CAAC,QAAL,CAAc,cAAd,EAAb;;AACA,YAAI,CAAC,IAAL,EAAW;AACP,UAAA,MAAM,CAAC,KAAP,CAAa,mCAAb;AACA,UAAA,GAAG,CAAC,iBAAD,CAAH;AACA;AACH,SANkB,CAQnB;;;AACA,QAAA,IAAI,CAAC,UAAL,CAAgB,UAAC,GAAD,EAAM,OAAN,EAAa;AACzB,cAAI,GAAJ,EAAS;AACL,YAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,GAA/C;AACA,YAAA,GAAG,CAAC,GAAD,CAAH;AACA;AACH,WALwB,CAOzB;;;AACA,cAAM,WAAW,GAAG,MAAM,GAAG,MAAM,CAAC,WAAV,GAAwB,KAAlD,CARyB,CASzB;;AACQ,cAAA,EAAA,GAAA,OAAA,CAAA,cAAA,GAAA,aAAA,GAAA,KAAA;AAAA,cAAA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA;;AACR,cAAI,KAAK,CAAC,KAAN,CAAY,GAAZ,EAAiB,QAAjB,CAA0B,gBAA1B,CAAJ,EAAiD;AAC7C,YAAA,IAAI,CAAC,WAAL,CACI,UAAC,GAAD,EAAM,IAAN,EAAU;AACN,kBAAI,GAAJ,EAAS;AACL,gBAAA,MAAM,CAAC,KAAP,CAAa,0BAAb,EAAyC,GAAzC,EADK,CAEL;;AACA,oBAAI,GAAG,CAAC,OAAJ,KAAgB,kBAAhB,IAAsC,GAAG,CAAC,OAAJ,KAAgB,sBAA1D,EAAkF;AAC9E,kBAAA,GAAG,CAAC,GAAD,CAAH;AACH,iBAFD,MAEO;AACH;AACA;AACA,kBAAA,GAAG,CAAC,IAAD,CAAH;AACH;;AACD;AACH;;AACD,kBAAM,YAAY,GAAG,IAAI,CAAC,mBAAL,IAA4B,OAAjD;AACA,kBAAM,aAAa,GAAG,EAAtB;;AAEA,mBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,cAAL,CAAoB,MAAxC,EAAgD,CAAC,EAAjD,EAAqD;AACjD,oBAAM,SAAS,GAAG;AACd,kBAAA,IAAI,EAAE,IAAI,CAAC,cAAL,CAAoB,CAApB,EAAuB,IADf;AAEd,kBAAA,KAAK,EAAE,IAAI,CAAC,cAAL,CAAoB,CAApB,EAAuB;AAFhB,iBAAlB;AAIA,oBAAM,aAAa,GAAG,IAAI,4BAAA,CAAA,oBAAJ,CAAyB,SAAzB,CAAtB;AACA,gBAAA,aAAa,CAAC,IAAd,CAAmB,aAAnB;AACH;;AAED,kBAAM,UAAU,GAAG,IAAI,CAAC,kBAAL,CAAwB,aAAxB,CAAnB;AACA,cAAA,MAAM,CAAC,MAAP,CAAc,IAAd,EAAoB;AAAE,gBAAA,UAAU,EAAA,UAAZ;AAAc,gBAAA,YAAY,EAAA;AAA1B,eAApB;AACA,qBAAO,GAAG,CAAC,IAAD,CAAV;AACH,aA7BL,EA8BI;AAAE,cAAA,WAAW,EAAA;AAAb,aA9BJ;AAgCH,WAjCD,MAiCO;AACH,YAAA,MAAM,CAAC,KAAP,CAAa,6CAA2C,gBAA3C,GAA2D,GAA3D,GACT,0CADJ;AAEA,mBAAO,GAAG,CAAC,IAAD,CAAV;AACH;AACJ,SAjDD;AAkDH,OA3DD,EA2DG,KA3DH,CA2DS,UAAA,CAAA,EAAC;AACN,QAAA,MAAM,CAAC,KAAP,CAAa,uCAAb,EAAsD,CAAtD;AACA,eAAO,GAAG,CAAC,CAAD,CAAV;AACH,OA9DD;AA+DH,KAhEM,CAAP;AAiEH,GApEM;AAsEP;;;;;;;AAKa,EAAA,SAAA,CAAA,SAAA,CAAA,wBAAA,GAAb,UAAsC,MAAtC,EAA8D;;;;;;AAC1D,YAAA,MAAM,CAAC,KAAP,CAAa,mCAAb;AACI,YAAA,aAAa,GAAG,IAAhB;;;;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,uCAAb,EAAsD,GAAtD;AACA,kBAAM,GAAN;;;AAGJ,gBAAI;AACA,cAAA,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,QAAL,CAAc,OAAd,CAAsB,2BAAtB,CAAX,EAA+D,IAA/E;AACH,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,cAAA,MAAM,CAAC,KAAP,CAAa,8CAAb;AACH;;iBAEG,a,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,iBAAK,IAAL,GAAY,aAAZ;AACA,YAAA,MAAM,CAAC,KAAP,CAAa,0CAAb,EAAyD,KAAK,IAA9D;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,IAAZ,CAAA;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,yCAAb;AACI,YAAA,IAAI,GAAG,IAAP;;;;;;AAEO,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,mBAAL,CAAyB,MAAzB,CAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;;;;;;;AAEA,gBAAI,GAAC,KAAK,aAAV,EAAyB;AACrB,cAAA,MAAM,CAAC,KAAP,CAAa,mEACT,kFADJ;AAEH;;AACD,YAAA,MAAM,CAAC,KAAP,CAAa,4CAAb,EAA2D,GAA3D;AACA,kBAAO,mBAAP;;;AAEJ,iBAAK,IAAL,GAAY,IAAZ;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,IAAZ,CAAA;;;;AAEP,GApCY;AAsCb;;;;;;AAIO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACI,QAAM,IAAI,GAAG,IAAb;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,yBAAb;;AACA,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAE7D,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,MAAA,IAAI,CAAC,mBAAL,GAA2B,IAA3B,CAAgC,UAAA,IAAA,EAAI;AAChC,QAAA,IAAI,CAAC,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAA,EAAO;AAC/B,UAAA,GAAG,CAAC,OAAD,CAAH;AACA;AACH,SAHD,EAGG,KAHH,CAGS,UAAA,CAAA,EAAC;AACN,UAAA,MAAM,CAAC,KAAP,CAAa,mCAAb,EAAkD,CAAlD;AACA,UAAA,GAAG,CAAC,CAAD,CAAH;AACA;AACH,SAPD;AAQH,OATD,EASG,KATH,CASS,UAAA,CAAA,EAAC;AACN,QAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,CAA/C;AACA,QAAA,GAAG,CAAC,CAAD,CAAH;AACA;AACH,OAbD;AAcH,KAfM,CAAP;AAgBH,GArBM;AAuBP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAAuB;AACnB,QAAI,CAAC,IAAL,EAAW;AACP,MAAA,MAAM,CAAC,KAAP,CAAa,kBAAb;AACA,aAAO,OAAO,CAAC,MAAR,CAAe,qDAAf,CAAP;AACH;;AACD,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,MAAM,CAAC,KAAP,CAAa,qCAAb,EAAoD,IAApD;AACA,MAAA,IAAI,CAAC,UAAL,CAAgB,UAAC,GAAD,EAAM,OAAN,EAAa;AACzB,YAAI,GAAJ,EAAS;AACL,UAAA,MAAM,CAAC,KAAP,CAAa,qCAAb,EAAoD,IAApD;AACA,UAAA,MAAM,CAAC,GAAD,CAAN;AACA;AACH,SAJD,MAIO;AACH,UAAA,MAAM,CAAC,KAAP,CAAa,iCAAb,EAAgD,OAAhD;AACA,UAAA,OAAO,CAAC,OAAD,CAAP;AACA;AACH;AACJ,OAVD;AAWH,KAbM,CAAP;AAcH,GAnBM;AAqBP;;;;;;AAIa,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAb,YAAA;;;;;;AACU,YAAA,IAAI,GAAG,IAAP;AACN,YAAA,MAAM,CAAC,KAAP,CAAa,kCAAb;;;;;;AAGI,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,uCAAb,EAAsD,GAAtD;AACA,kBAAM,GAAN;;;AAIA,YAAA,aAAa,GAAG,IAAhB;;AACJ,gBAAI;AACA,cAAA,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,QAAL,CAAc,OAAd,CAAsB,2BAAtB,CAAX,CAAhB;AACH,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,cAAA,MAAM,CAAC,KAAP,CAAa,uDAAb,EAAsE,CAAtE;AACH;;AAED,gBAAI,aAAJ,EAAmB;AACf;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,MAAA,CAAA,WAAA,CAAY,qBAAZ,CAAkC,aAAlC,CAAP,CAAA;AACH,aAHD,MAGO;AACH,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,cAAL,GACF,IADE,CACG,UAAA,OAAA,EAAO;AACT,gBAAA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,OAAxC;AACA,uBAAO,MAAA,CAAA,WAAA,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,SAAzB,CAAP;AACH,eAJE,EAIA,KAJA,CAIM,UAAC,KAAD,EAAM;AACX,gBAAA,MAAM,CAAC,KAAP,CAAa,wBAAb,EAAuC,KAAvC;AACA,uBAAO,MAAA,CAAA,WAAA,CAAY,GAAZ,CAAgB,IAAhB,EAAsB,OAAtB,CAAP;AACH,eAPE,CAAP,CAAA;AAQH;;;;;;;;AACJ,GAhCY;;AAmCN,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;AACI,IAAA,MAAM,CAAC,KAAP,CAAa,4BAAb;AACA,WAAO,MAAA,CAAA,WAAA,CAAY,GAAZ,EAAP;AACH,GAHM;AAKP;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,IAA3B,EAAoD,IAApD,EAAgE;AAC5D,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,4BAAL,CAAkC,IAAlC,EAAwC;AACpC,QAAA,SAAS,EAAA,qBAAA;AAAK,iBAAO,OAAO,EAAd;AAAmB,SADG;AAEpC,QAAA,SAAS,EAAA,mBAAC,GAAD,EAAI;AAAI,iBAAO,MAAM,CAAC,GAAD,CAAb;AAAqB;AAFF,OAAxC;AAIH,KALM,CAAP;AAMH,GAPM;AASP;;;;;;;;;AAOO,EAAA,SAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,IAAjC,EAA0D,IAA1D,EAAwE,IAAxE,EAAoF;AAChF,QAAI,CAAC,IAAL,EAAW;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,sBAAf,CAAP;AAAgD;;AAE7D,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,eAAL,CAAqB,IAArB,EAA2B,IAA3B,EAAiC;AAC7B,QAAA,SAAS,EAAA,mBAAC,IAAD,EAAK;AACV,UAAA,OAAO,CAAC,IAAD,CAAP;AACA;AACH,SAJ4B;AAK7B,QAAA,SAAS,EAAA,mBAAC,GAAD,EAAI;AACT,UAAA,MAAM,CAAC,GAAD,CAAN;AACA;AACH;AAR4B,OAAjC;AAUH,KAXM,CAAP;AAYH,GAfM;;AAiBA,EAAA,SAAA,CAAA,SAAA,CAAA,0BAAA,GAAP,UAAkC,IAAlC,EAA8C;AAC1C,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,CAAC,mBAAL,GACF,IADE,CACG,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,CAAC,mBAAL,CAAyB,IAAzB,EAAA,IAAA,CAAA;AAAoC,KAD/C,CAAP;AAEH,GAJM;AAMP;;;;;;;;AAMA,EAAA,SAAA,CAAA,SAAA,CAAA,gCAAA,GAAA,UAAiC,IAAjC,EAA+C,IAA/C,EAA2D;AACvD,QAAM,IAAI,GAAG,IAAb;AACA,WAAO,IAAI,CAAC,mBAAL,GACF,IADE,CACG,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,CAAC,yBAAL,CAA+B,IAA/B,EAAqC,IAArC,EAAA,IAAA,CAAA;AAAgD,KAD3D,CAAP;AAEH,GAJD;;AAMc,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAd,UAAqC,IAArC,EAAwD,IAAxD,EAA+E;;;;;;;;;;;AAEvE,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,uCAAb,EAAsD,GAAtD;AACA,kBAAM,GAAN;;;AAGE,YAAA,kBAAkB,GAAG,KAAK,aAAL,IACpB,KAAK,QAAL,CAAc,OAAd,CAAsB,8BAAtB,MAA0D,MAD3D;AAGN,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AACxB,kBAAI,IAAI,IAAI,IAAI,CAAC,MAAjB,EAAyB;AACrB,gBAAA,MAAM,CAAC,KAAP,CAAa,sBAAb,EAAqC,IAArC,EADqB,CAErB;AACA;;AACA,gBAAA,IAAI,CAAC,UAAL,CAAgB,UAAC,GAAD,EAAM,MAAN,EAAY;AACxB,sBAAI,GAAJ,EAAS;AACL,oBAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,GAA/C;AACA,2BAAO,GAAG,CAAC,GAAD,CAAV;AACH;;AACD,kBAAA,IAAI,CAAC,aAAL,CAAmB;AACf,oBAAA,SAAS,EAAE,mBAAC,IAAD,EAAK;AACZ,sBAAA,MAAM,CAAC,KAAP,CAAa,yBAAb;;AACA,0BAAI,kBAAJ,EAAwB;AACpB,+BAAO,GAAG,CAAC,KAAI,CAAC,aAAL,CAAmB,OAAnB,EAAD,CAAV;AACH,uBAFD,MAEO;AACH,+BAAO,GAAG,EAAV;AACH;AACJ,qBARc;AASf,oBAAA,SAAS,EAAE,mBAAC,GAAD,EAAI;AACX,sBAAA,MAAM,CAAC,KAAP,CAAa,wBAAb,EAAuC,GAAvC;AACA,6BAAO,GAAG,CAAC,GAAD,CAAV;AACH;AAZc,mBAAnB;AAcH,iBAnBD;AAoBH,eAxBD,MAwBO;AACH,gBAAA,MAAM,CAAC,KAAP,CAAa,eAAb,EAA8B,IAA9B;AACA,gBAAA,IAAI,CAAC,OAAL;;AACA,oBAAI,kBAAJ,EAAwB;AACpB,yBAAO,GAAG,CAAC,KAAI,CAAC,aAAL,CAAmB,OAAnB,EAAD,CAAV;AACH,iBAFD,MAEO;AACH,yBAAO,GAAG,EAAV;AACH;AACJ;AACJ,aAlCM,CAAP,CAAA;;;;AAmCH,GA9Ca;AAgDd;;;;;;;AAKa,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAb,UAAqB,IAArB,EAAuC;;;;;;;;AAE/B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,8BAAb;;;;;;iBAGA,KAAK,Q,EAAL,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACM,YAAA,IAAI,GAAG,KAAK,QAAL,CAAc,cAAd,EAAP;iBACF,I,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,sBAAL,CAA4B,IAA5B,EAAkC,IAAlC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,yBAAb;;;;;;;;;AAGJ,YAAA,MAAM,CAAC,KAAP,CAAa,sBAAb;;;;AAGJ;;;;;;AAMA,YAAA,iBAAiB,CACb,SADa,EAEb,KAAK,IAFQ,EAGb,4BAHa,CAAjB;AAKA,iBAAK,IAAL,GAAY,IAAZ;;;;;;;AACH,GA9BY;;AAgCC,EAAA,SAAA,CAAA,SAAA,CAAA,gBAAA,GAAd,YAAA;;;;;AACI;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAA,CAAA,WAAA,CAAY,KAAZ,EAAN,CAAA;;;AADA;AACA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GAHa;AAKd;;;;;;;;;AAOO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA+C,WAA/C,EAAoE,WAApE,EAAuF;AAAvF,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,KAAI,CAAC,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,UAAA,OAAA,EAAO;AAC/B,QAAA,IAAI,CAAC,cAAL,CAAoB,WAApB,EAAiC,WAAjC,EAA8C,UAAC,GAAD,EAAM,IAAN,EAAU;AACpD,cAAI,GAAJ,EAAS;AACL,YAAA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,GAAxC;AACA,mBAAO,MAAM,CAAC,GAAD,CAAb;AACH,WAHD,MAGO;AACH,mBAAO,OAAO,CAAC,IAAD,CAAd;AACH;AACJ,SAPD;AAQH,OATD;AAUH,KAXM,CAAP;AAYH,GAbM;AAeP;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,QAAtB,EAAsC;AAClC,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AAErE,QAAM,IAAI,GAAG,KAAK,iBAAL,CAAuB,QAAvB,CAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,cAAL,CAAoB;AAChB,QAAA,SAAS,EAAE,qBAAA;AACP,UAAA,OAAO;AACP;AACH,SAJe;AAKhB,QAAA,SAAS,EAAE,mBAAA,GAAA,EAAG;AACV,UAAA,MAAM,CAAC,KAAP,CAAa,yBAAb,EAAwC,GAAxC;AACA,UAAA,MAAM,CAAC,GAAD,CAAN;AACA;AACH,SATe;AAUhB,QAAA,qBAAqB,EAAE,+BAAA,IAAA,EAAI;AACvB,UAAA,OAAO,CAAC,IAAD,CAAP;AACA;AACH;AAbe,OAApB;AAeH,KAhBM,CAAP;AAiBH,GAtBM;AAwBP;;;;;;;;;AAOO,EAAA,SAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UACI,QADJ,EAEI,IAFJ,EAGI,QAHJ,EAGoB;AAEhB,QAAI,CAAC,KAAK,QAAV,EAAoB;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,aAAf,CAAP;AAAuC;;AAC7D,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AACrE,QAAI,CAAC,IAAL,EAAW;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,sBAAf,CAAP;AAAgD;;AAC7D,QAAI,CAAC,QAAL,EAAe;AAAE,aAAO,OAAO,CAAC,MAAR,CAAe,0BAAf,CAAP;AAAoD;;AAErE,QAAM,IAAI,GAAG,KAAK,iBAAL,CAAuB,QAAvB,CAAb;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC/B,MAAA,IAAI,CAAC,eAAL,CAAqB,IAArB,EAA2B,QAA3B,EAAqC;AACjC,QAAA,SAAS,EAAE,qBAAA;AACP,UAAA,OAAO;AACP;AACH,SAJgC;AAKjC,QAAA,SAAS,EAAE,mBAAA,GAAA,EAAG;AACV,UAAA,MAAM,CAAC,GAAD,CAAN;AACA;AACH;AARgC,OAArC;AAUH,KAXM,CAAP;AAYH,GAvBM;AAyBP;;;;;;;AAKa,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAb,YAAA;;;;;;AACU,YAAA,MAAM,GAAG,MAAA,CAAA,WAAA,CAAY,aAAZ,EAAT;gBAEF,EAAA,CAAC,MAAD,IAAW,MAAM,KAAK,KAAtB,IAA+B,MAAM,KAAK,UAA1C,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACa,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,mBAAL,GACd,KADc,CACR,UAAA,GAAA,EAAG;AAAI,qBAAA,MAAM,CAAC,KAAP,CAAA,GAAA,CAAA;AAAiB,aADhB,CAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;AAEN,gBAAI,CAAC,IAAL,EAAW;AAAE,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAP,CAAA;AAAc;;;;;;;AAGJ,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,cAAL,CAAoB,IAApB,CAAN,CAAA;;;AAAb,YAAA,UAAU,GAAG,EAAA,CAAA,IAAA,EAAb;AACA,YAAA,SAAS,GAAW,KAAK,kBAAL,CAAwB,UAAxB,CAApB;AACF,YAAA,WAAW,GAAG,IAAd;;;;;;AAEc,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,gEAAb,EAA+E,IAA/E;;;;;;AAIE,YAAA,IAAI,GAAG;AACT,oBAAM,WAAW,GAAG,WAAW,CAAC,UAAf,GAA4B,SADpC;AAET,0BAAY,IAAI,CAAC,WAAL,EAFH;AAGT,4BAAc;AAHL,aAAP;AAKN,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAP,CAAA;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,uBAAb,EAAsC,KAAtC;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAP,CAAA;;;AAIR,gBAAI,MAAM,KAAK,WAAf,EAA4B;AAClB,cAAA,IAAI,GAAG,KAAK,IAAZ;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,IAAI,GAAG,IAAH,GAAU,EAArB,CAAA;AACH;;;;;;;;AACJ,GAnCY;;AA+CA,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAb,UACI,iBADJ,EAEI,QAFJ,EAGI,IAHJ,EAGwB;;;;;;AAIpB,gBAAI,CAAC,KAAK,OAAL,CAAa,cAAd,IAAgC,CAAC,KAAK,OAAL,CAAa,UAAlD,EAA8D;AAC1D,oBAAM,IAAI,KAAJ,CAAU,mEAAV,CAAN;AACH,a,CAED;;;AACA,gBAAI,OAAO,iBAAP,KAA6B,WAAjC,EAA8C;AAC1C,kBAAI,KAAK,OAAL,CAAa,cAAb,IAA+B,CAAC,KAAK,OAAL,CAAa,UAAjD,EAA6D;AACzD,sBAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN;AACH;AACJ;;gBAEG,EAAA,OAAA,CAAA,wBAAA,CAAyB,iBAAzB,KACG,OAAA,CAAA,8BAAA,CAA+B,iBAA/B,CADH,IAEG,OAAO,iBAAP,KAA6B,WAFhC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAIM,YAAA,OAAO,GAAG,iBAAiB,IAAI;AAAE,cAAA,QAAQ,EAAE,+BAA+B,CAAC;AAA5C,aAA/B;AACA,YAAA,QAAQ,GAAG,OAAA,CAAA,wBAAA,CAAyB,OAAzB,IACX,OAAO,CAAC,QADG,GAEV,OAAwC,CAAC,cAF1C;AAIA,YAAA,WAAW,GAAG,OAAA,CAAA,wBAAA,CAAyB,OAAzB,IACd,OAAO,CAAC,WADM,GAEb,OAAwC,CAAC,WAF1C;;AAIN,gBAAI,KAAK,OAAL,CAAa,UAAjB,EAA6B;AACnB,cAAA,SAAS,GAAG,OAAA,CAAA,mBAAA,CAAoB,KAAK,OAAL,CAAa,KAAjC,IACZ,KAAK,OAAL,CAAa,mBADD,GAEZ,KAAK,OAAL,CAAa,KAAb,CAAmB,QAFnB;AAIA,cAAA,YAAY,GAAG,OAAA,CAAA,mBAAA,CAAoB,KAAK,OAAL,CAAa,KAAjC,IACf,KAAK,OAAL,CAAa,KAAb,CAAmB,cADJ,GAEf,KAAK,OAAL,CAAa,KAAb,CAAmB,WAFnB;;AAIN,mBAAK,aAAL,CAAmB,WAAnB,CACI,KAAK,OAAL,CAAa,KAAb,CAAmB,YADvB,EAEI,KAAK,OAAL,CAAa,KAAb,CAAmB,MAFvB,EAGI,YAHJ,EAII,SAJJ,EAKI,QALJ,EAMI,WANJ;AAQH;;;;;;;AAGK,YAAA,QAAQ,GAAG,iBAAX;;;;;;AAGmB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,wBAAL,EAAN,CAAA;;;AAAf,YAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;AACN,YAAA,MAAM,CAAC,IAAP,CAAY,wCAAsC,YAAtC,GAAkD,2HAA9D;;;;;;;;;;;;AAII,YAAA,KAAK,GAA8B,QAAQ,CAAtC,KAAL,EAAO,WAAW,GAAiB,QAAQ,CAAzB,WAAlB,EAAoB,UAAU,GAAK,QAAQ,CAAb,UAA9B;AAGY,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAA,CAAA,WAAA,CAAY,GAAZ,CACtB;AAAE,cAAA,QAAQ,EAAA,QAAV;AAAY,cAAA,KAAK,EAAA,KAAjB;AAAmB,cAAA,WAAW,EAAA,WAA9B;AAAgC,cAAA,IAAI,EAAA,IAApC;AAAsC,cAAA,UAAU,EAAA;AAAhD,aADsB,EAEtB,YAFsB,CAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AAIc,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,wBAAL,EAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AACN,YAAA,iBAAiB,CACb,QADa,EAEb,WAFa,EAGb,YAAU,WAAW,CAAC,QAAtB,GAA8B,qBAHjB,CAAjB;AAKA,YAAA,MAAM,CAAC,KAAP,CAAa,+BAAb,EAA8C,WAA9C;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,WAAP,CAAA;;;;;;;;;AAEP,GA3EY;AA6Eb;;;;;;AAIc,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAd,UAAkC,GAAlC,EAA8C;;;;;;;AAE1C,gBAAI,CAAC,KAAK,OAAL,CAAa,UAAlB,EAA6B;AACzB,oBAAM,IAAI,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAED,YAAA,iBAAiB,CACb,oBADa,EAEb;AAAE,cAAA,GAAG,EAAE;AAAP,aAFa,EAGb,kCAHa,CAAjB;AAMM,YAAA,UAAU,GAAG,GAAG,KAAK,MAAA,CAAA,EAAA,CAAG,aAAH,GAAmB,SAAnB,GAA+B,MAAM,CAAC,QAAP,CAAgB,IAA/C,GAAsD,EAA3D,CAAhB;AAEA,YAAA,cAAc,GAAG,CAAC,CAAC,CAAC,KAAA,CAAA,KAAA,CAAM,UAAN,EAAkB,KAAlB,IAA2B,EAA5B,EACpB,KADoB,CACd,GADc,EAEpB,GAFoB,CAEhB,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAC,KAAN,CAAA,GAAA,CAAA;AAAgB,aAFT,EAGpB,IAHoB,CAGf,UAAC,EAAD,EAAI;kBAAF,CAAA,GAAA,EAAA,CAAA,CAAA,C;AAAO,qBAAA,CAAC,KAAK,MAAN,IAAgB,CAAC,KAAK,OAAtB;AAA6B,aAHvB,CAAnB;AAKA,YAAA,eAAe,GAAG,CAAC,CAAC,CAAC,KAAA,CAAA,KAAA,CAAM,UAAN,EAAkB,IAAlB,IAA0B,GAA3B,EACrB,MADqB,CACd,CADc,EAErB,KAFqB,CAEf,GAFe,EAGrB,GAHqB,CAGjB,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAC,KAAN,CAAA,GAAA,CAAA;AAAgB,aAHR,EAIrB,IAJqB,CAIhB,UAAC,EAAD,EAAI;kBAAF,CAAA,GAAA,EAAA,CAAA,CAAA,C;AAAO,qBAAA,CAAC,KAAK,cAAN,IAAwB,CAAC,KAAK,OAA9B;AAAqC,aAJ9B,CAApB;gBAOF,EAAA,cAAc,IAAI,eAAlB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAOkB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,UAAtC,CAAN,CAAA;;;AAJR,YAAA,EAAA,GAIQ,EAAA,CAAA,IAAA,EAJR,EACF,WAAW,GAAA,EAAA,CAAA,WADT,EAEF,OAAO,GAAA,EAAA,CAAA,OAFL,EAGF,YAAY,GAAA,EAAA,CAAA,YAHV,EAIF,KAAK,GAAA,EAAA,CAAA,KAJH;AAKA,YAAA,OAAO,GAAG,IAAI,4BAAA,CAAA,kBAAJ,CAAuB;AACnC,cAAA,OAAO,EAAE,IAAI,4BAAA,CAAA,cAAJ,CAAmB;AAAE,gBAAA,OAAO,EAAE;AAAX,eAAnB,CAD0B;AAEnC,cAAA,YAAY,EAAE,IAAI,4BAAA,CAAA,mBAAJ,CAAwB;AAAE,gBAAA,YAAY,EAAE;AAAhB,eAAxB,CAFqB;AAGnC,cAAA,WAAW,EAAE,IAAI,4BAAA,CAAA,kBAAJ,CAAuB;AAAE,gBAAA,WAAW,EAAE;AAAf,eAAvB;AAHsB,aAAvB,CAAV;AAMF,YAAA,WAAW,GAAA,KAAA,CAAX;iBAEA,KAAK,OAAL,CAAa,c,EAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACc,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAA,CAAA,WAAA,CAAY,GAAZ,CAAgB,OAAhB,EAAyB,SAAzB,CAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AACA,YAAA,MAAM,CAAC,KAAP,CAAa,iBAAb,EAAgC,WAAhC;;;;AAQE,YAAA,qBAAqB,GAAG,IAAI,IAAJ,CAAS,KAAT,CAAxB;AAKA,YAAA,WAAW,GAAG,KAAK,iBAAL,CAAuB,OAAO,CAAC,UAAR,GAAqB,aAArB,GAAqC,kBAArC,CAAvB,CAAd;AACN,YAAA,iBAAiB,CACb,QADa,EAEb,WAFa,EAGb,YAAU,WAAW,CAAC,WAAZ,EAAV,GAAmC,qBAHtB,CAAjB;AAKA,YAAA,iBAAiB,CACb,iBADa,EAEb,WAFa,EAGb,YAAU,WAAW,CAAC,WAAZ,EAAV,GAAmC,2CAHtB,CAAjB;;AAMA,gBAAI,qBAAJ,EAA2B;AACjB,cAAA,EAAA,GAAkB,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAlB,EAAG,WAAW,GAAA,EAAA,CAAA,CAAA,CAAd;AAEN,cAAA,iBAAiB,CACb,kBADa,EAEb,WAFa,EAGb,oBAAkB,WAAW,CAAC,WAAZ,EAHL,CAAjB;AAKH,a,CAED;;;AACA,YAAA,WAAW,CAAC,oBAAZ,CAAiC,OAAjC,E,CACA;;AAEA,gBAAI,MAAM,IAAI,OAAO,MAAM,CAAC,OAAd,KAA0B,WAAxC,EAAqD;AACjD,cAAA,MAAM,CAAC,OAAP,CAAe,YAAf,CAA4B,EAA5B,EAAgC,IAAhC,EAAuC,KAAK,OAAL,CAAa,KAAb,CAA2C,cAAlF;AACH;;AAED,mBAAA,CAAA;AAAA;AAAA,cAAO,WAAP,CAAA;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,uCAAb,EAAsD,KAAtD;AACA,YAAA,iBAAiB,CACb,gBADa,EAEb,KAFa,EAGb,gCAHa,CAAjB;AAKA,YAAA,iBAAiB,CACb,yBADa,EAEb,KAFa,EAGb,4DAHa,CAAjB;AAKA,YAAA,iBAAiB,CACb,qBADa,EAEb,KAFa,EAGb,yCAHa,CAAjB;AAKA,kBAAM,KAAN;;;;;;;;;AAIX,GA7Ga;AA+Gd;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,WAA5B,EAAuC;AACnC,WAAO;AACH,MAAA,WAAW,EAAE,WAAW,CAAC,WADtB;AAEH,MAAA,YAAY,EAAE,WAAW,CAAC,YAFvB;AAGH,MAAA,eAAe,EAAE,WAAW,CAAC,eAH1B;AAIH,MAAA,UAAU,EAAE,WAAW,CAAC,UAJrB;AAKH,MAAA,aAAa,EAAE,WAAW,CAAC;AALxB,KAAP;AAOH,GARM;;AAUC,EAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,UAA3B,EAAqC;AACjC,QAAM,GAAG,GAAG,EAAZ;;AACA,QAAI,UAAJ,EAAgB;AACZ,MAAA,UAAU,CAAC,GAAX,CAAe,UAAA,SAAA,EAAS;AACpB,YAAI,SAAS,CAAC,KAAV,KAAoB,MAAxB,EAAgC;AAC5B,UAAA,GAAG,CAAC,SAAS,CAAC,IAAX,CAAH,GAAsB,IAAtB;AACH,SAFD,MAEO,IAAI,SAAS,CAAC,KAAV,KAAoB,OAAxB,EAAiC;AACpC,UAAA,GAAG,CAAC,SAAS,CAAC,IAAX,CAAH,GAAsB,KAAtB;AACH,SAFM,MAEA;AACH,UAAA,GAAG,CAAC,SAAS,CAAC,IAAX,CAAH,GAAsB,SAAS,CAAC,KAAhC;AACH;AACJ,OARD;AASH;;AACD,WAAO,GAAP;AACH,GAdO;;AAgBA,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,QAA1B,EAA0C;AACtC,QAAM,QAAQ,GAAqB;AAC/B,MAAA,QAAQ,EAAE,QADqB;AAE/B,MAAA,IAAI,EAAE,KAAK;AAFoB,KAAnC;AAIA,IAAA,QAAQ,CAAC,OAAT,GAAmB,KAAK,QAAxB;AAEQ,QAAA,sBAAA,GAAA,KAAA,OAAA,CAAA,sBAAA;AAER,QAAM,IAAI,GAAG,IAAI,4BAAA,CAAA,WAAJ,CAAgB,QAAhB,CAAb;;AACA,QAAI,sBAAJ,EAA4B;AACxB,MAAA,IAAI,CAAC,yBAAL,CAA+B,sBAA/B;AACH;;AACD,WAAO,IAAP;AACH,GAdO;;AAgBA,EAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,GAA5B,EAA+B;AAC3B;AACA,WAAO,CAAC,CAAC,GAAF,IACH,OAAO,GAAG,CAAC,OAAX,KAAuB,UADpB,IAEH,OAAO,GAAG,CAAC,OAAX,KAAuB,UAFpB,IAGH,OAAO,GAAG,CAAC,UAAX,KAA0B,UAHvB,IAIH,OAAO,GAAG,CAAC,KAAX,KAAqB,UAJzB;AAKH,GAPO;;AAQZ,SAAA,SAAA;AAAC,CAtkDD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"./types\");\nvar core_1 = require(\"@aws-amplify/core\");\nvar amazon_cognito_identity_js_1 = require(\"amazon-cognito-identity-js\");\nvar url_1 = require(\"url\");\nvar OAuth_1 = require(\"./OAuth/OAuth\");\nvar urlListener_1 = require(\"./urlListener\");\nvar logger = new core_1.ConsoleLogger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\nvar AMPLIFY_SYMBOL = ((typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') ?\n    Symbol.for('amplify_default') : '@@amplify_default');\nvar dispatchAuthEvent = function (event, data, message) {\n    core_1.Hub.dispatch('auth', { event: event, data: data, message: message }, 'Auth', AMPLIFY_SYMBOL);\n};\nvar CognitoHostedUIIdentityProvider;\n(function (CognitoHostedUIIdentityProvider) {\n    CognitoHostedUIIdentityProvider[\"Cognito\"] = \"COGNITO\";\n    CognitoHostedUIIdentityProvider[\"Google\"] = \"Google\";\n    CognitoHostedUIIdentityProvider[\"Facebook\"] = \"Facebook\";\n    CognitoHostedUIIdentityProvider[\"Amazon\"] = \"LoginWithAmazon\";\n})(CognitoHostedUIIdentityProvider = exports.CognitoHostedUIIdentityProvider || (exports.CognitoHostedUIIdentityProvider = {}));\n/**\n* Provide authentication steps\n*/\nvar AuthClass = /** @class */ (function () {\n    /**\n     * Initialize Auth with AWS configurations\n     * @param {Object} config - Configuration of the Auth\n     */\n    function AuthClass(config) {\n        var _this = this;\n        this.userPool = null;\n        this.user = null;\n        this.configure(config);\n        this.currentUserCredentials = this.currentUserCredentials.bind(this);\n        if (core_1.AWS.config) {\n            core_1.AWS.config.update({ customUserAgent: core_1.Constants.userAgent });\n        }\n        else {\n            logger.warn('No AWS.config');\n        }\n        core_1.Hub.listen('auth', function (_a) {\n            var payload = _a.payload;\n            var event = payload.event;\n            switch (event) {\n                case 'signIn':\n                    _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n                    break;\n                case 'signOut':\n                    _this._storage.removeItem('amplify-signin-with-hostedUI');\n                    break;\n                case 'cognitoHostedUI':\n                    _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n                    break;\n            }\n        });\n    }\n    AuthClass.prototype.getModuleName = function () {\n        return 'Auth';\n    };\n    AuthClass.prototype.configure = function (config) {\n        var _this = this;\n        if (!config)\n            return this._config || {};\n        logger.debug('configure Auth');\n        var conf = Object.assign({}, this._config, core_1.Parser.parseMobilehubConfig(config).Auth, config);\n        this._config = conf;\n        var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion;\n        if (!this._config.storage) {\n            // backward compatbility\n            if (cookieStorage)\n                this._storage = new amazon_cognito_identity_js_1.CookieStorage(cookieStorage);\n            else {\n                this._storage = new core_1.StorageHelper().getStorage();\n            }\n        }\n        else {\n            if (!this._isValidAuthStorage(this._config.storage)) {\n                logger.error('The storage in the Auth config is not valid!');\n                throw new Error('Empty storage object');\n            }\n            this._storage = this._config.storage;\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        if (userPoolId) {\n            var userPoolData = {\n                UserPoolId: userPoolId,\n                ClientId: userPoolWebClientId,\n            };\n            userPoolData.Storage = this._storage;\n            this.userPool = new amazon_cognito_identity_js_1.CognitoUserPool(userPoolData);\n        }\n        core_1.Credentials.configure({\n            mandatorySignIn: mandatorySignIn,\n            region: identityPoolRegion || region,\n            userPoolId: userPoolId,\n            identityPoolId: identityPoolId,\n            refreshHandlers: refreshHandlers,\n            storage: this._storage\n        });\n        // initiailize cognitoauth client if hosted ui options provided\n        // to keep backward compatibility:\n        var cognitoHostedUIConfig = oauth ? (types_1.isCognitoHostedOpts(this._config.oauth)\n            ? oauth : oauth.awsCognito)\n            : undefined;\n        if (cognitoHostedUIConfig) {\n            var cognitoAuthParams = Object.assign({\n                cognitoClientId: userPoolWebClientId,\n                UserPoolId: userPoolId,\n                domain: cognitoHostedUIConfig['domain'],\n                scopes: cognitoHostedUIConfig['scope'],\n                redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n                redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n                responseType: cognitoHostedUIConfig['responseType'],\n                Storage: this._storage,\n                urlOpener: cognitoHostedUIConfig['urlOpener']\n            }, cognitoHostedUIConfig['options']);\n            this._oAuthHandler = new OAuth_1.default({\n                scopes: cognitoAuthParams.scopes,\n                config: cognitoAuthParams,\n                cognitoClientId: cognitoAuthParams.cognitoClientId\n            });\n            // **NOTE** - Remove this in a future major release as it is a breaking change\n            urlListener_1.default(function (_a) {\n                var url = _a.url;\n                _this._handleAuthResponse(url);\n            });\n        }\n        dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n        return this._config;\n    };\n    /**\n     * Sign up with username, password and other attrbutes like phone, email\n     * @param {String | object} params - The user attirbutes used for signin\n     * @param {String[]} restOfAttrs - for the backward compatability\n     * @return - A promise resolves callback data if success\n     */\n    AuthClass.prototype.signUp = function (params) {\n        var _this = this;\n        var restOfAttrs = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            restOfAttrs[_i - 1] = arguments[_i];\n        }\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        var username = null;\n        var password = null;\n        var attributes = [];\n        var validationData = null;\n        if (params && typeof params === 'string') {\n            username = params;\n            password = restOfAttrs ? restOfAttrs[0] : null;\n            var email = restOfAttrs ? restOfAttrs[1] : null;\n            var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n            if (email)\n                attributes.push({ Name: 'email', Value: email });\n            if (phone_number)\n                attributes.push({ Name: 'phone_number', Value: phone_number });\n        }\n        else if (params && typeof params === 'object') {\n            username = params['username'];\n            password = params['password'];\n            var attrs_1 = params['attributes'];\n            if (attrs_1) {\n                Object.keys(attrs_1).map(function (key) {\n                    var ele = { Name: key, Value: attrs_1[key] };\n                    attributes.push(ele);\n                });\n            }\n            validationData = params['validationData'] || null;\n        }\n        else {\n            return Promise.reject('The first parameter should either be non-null string or object');\n        }\n        if (!username) {\n            return Promise.reject('Username cannot be empty');\n        }\n        if (!password) {\n            return Promise.reject('Password cannot be empty');\n        }\n        logger.debug('signUp attrs:', attributes);\n        logger.debug('signUp validation data:', validationData);\n        return new Promise(function (resolve, reject) {\n            _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n                if (err) {\n                    dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n                    reject(err);\n                }\n                else {\n                    dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n                    resolve(data);\n                }\n            });\n        });\n    };\n    /**\n     * Send the verfication code to confirm sign up\n     * @param {String} username - The username to be confirmed\n     * @param {String} code - The verification code\n     * @param {ConfirmSignUpOptions} options - other options for confirm signup\n     * @return - A promise resolves callback data if success\n     */\n    AuthClass.prototype.confirmSignUp = function (username, code, options) {\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        if (!username) {\n            return Promise.reject('Username cannot be empty');\n        }\n        if (!code) {\n            return Promise.reject('Code cannot be empty');\n        }\n        var user = this.createCognitoUser(username);\n        var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean'\n            ? options.forceAliasCreation : true;\n        return new Promise(function (resolve, reject) {\n            user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(data);\n                }\n            });\n        });\n    };\n    /**\n     * Resend the verification code\n     * @param {String} username - The username to be confirmed\n     * @return - A promise resolves data if success\n     */\n    AuthClass.prototype.resendSignUp = function (username) {\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        if (!username) {\n            return Promise.reject('Username cannot be empty');\n        }\n        var user = this.createCognitoUser(username);\n        return new Promise(function (resolve, reject) {\n            user.resendConfirmationCode(function (err, data) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(data);\n                }\n            });\n        });\n    };\n    /**\n     * Sign in\n     * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n     * @param {String} password - The password of the username\n     * @return - A promise resolves the CognitoUser\n     */\n    AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw) {\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        var username = null;\n        var password = null;\n        var validationData = {};\n        // for backward compatibility\n        if (typeof usernameOrSignInOpts === 'string') {\n            username = usernameOrSignInOpts;\n            password = pw;\n        }\n        else if (types_1.isUsernamePasswordOpts(usernameOrSignInOpts)) {\n            if (typeof pw !== 'undefined') {\n                logger.warn('The password should be defined under the first parameter object!');\n            }\n            username = usernameOrSignInOpts.username;\n            password = usernameOrSignInOpts.password;\n            validationData = usernameOrSignInOpts.validationData;\n        }\n        else {\n            return Promise.reject(new Error('The username should either be a string or one of the sign in types'));\n        }\n        if (!username) {\n            return Promise.reject('Username cannot be empty');\n        }\n        var authDetails = new amazon_cognito_identity_js_1.AuthenticationDetails({\n            Username: username,\n            Password: password,\n            ValidationData: validationData\n        });\n        if (password) {\n            return this.signInWithPassword(authDetails);\n        }\n        else {\n            return this.signInWithoutPassword(authDetails);\n        }\n    };\n    /**\n     * Return an object with the authentication callbacks\n     * @param {CognitoUser} user - the cognito user object\n     * @param {} resolve - function called when resolving the current step\n     * @param {} reject - function called when rejecting the current step\n     * @return - an object with the callback methods for user authentication\n     */\n    AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n        var _this = this;\n        var that = this;\n        return {\n            onSuccess: function (session) { return __awaiter(_this, void 0, void 0, function () {\n                var cred, e_1, currentUser, e_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            logger.debug(session);\n                            delete (user['challengeName']);\n                            delete (user['challengeParam']);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 4, 5, 9]);\n                            return [4 /*yield*/, core_1.Credentials.clear()];\n                        case 2:\n                            _a.sent();\n                            return [4 /*yield*/, core_1.Credentials.set(session, 'session')];\n                        case 3:\n                            cred = _a.sent();\n                            logger.debug('succeed to get cognito credentials', cred);\n                            return [3 /*break*/, 9];\n                        case 4:\n                            e_1 = _a.sent();\n                            logger.debug('cannot get cognito credentials', e_1);\n                            return [3 /*break*/, 9];\n                        case 5:\n                            _a.trys.push([5, 7, , 8]);\n                            return [4 /*yield*/, this.currentUserPoolUser()];\n                        case 6:\n                            currentUser = _a.sent();\n                            that.user = currentUser;\n                            dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                            resolve(currentUser);\n                            return [3 /*break*/, 8];\n                        case 7:\n                            e_2 = _a.sent();\n                            logger.error('Failed to get the signed in user', e_2);\n                            reject(e_2);\n                            return [3 /*break*/, 8];\n                        case 8: return [7 /*endfinally*/];\n                        case 9: return [2 /*return*/];\n                    }\n                });\n            }); },\n            onFailure: function (err) {\n                logger.debug('signIn failure', err);\n                dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n                reject(err);\n            },\n            customChallenge: function (challengeParam) {\n                logger.debug('signIn custom challenge answer required');\n                user['challengeName'] = 'CUSTOM_CHALLENGE';\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            mfaRequired: function (challengeName, challengeParam) {\n                logger.debug('signIn MFA required');\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            mfaSetup: function (challengeName, challengeParam) {\n                logger.debug('signIn mfa setup', challengeName);\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            newPasswordRequired: function (userAttributes, requiredAttributes) {\n                logger.debug('signIn new password');\n                user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n                user['challengeParam'] = {\n                    userAttributes: userAttributes,\n                    requiredAttributes: requiredAttributes\n                };\n                resolve(user);\n            },\n            totpRequired: function (challengeName, challengeParam) {\n                logger.debug('signIn totpRequired');\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            },\n            selectMFAType: function (challengeName, challengeParam) {\n                logger.debug('signIn selectMFAType', challengeName);\n                user['challengeName'] = challengeName;\n                user['challengeParam'] = challengeParam;\n                resolve(user);\n            }\n        };\n    };\n    /**\n     * Sign in with a password\n     * @private\n     * @param {AuthenticationDetails} authDetails - the user sign in data\n     * @return - A promise resolves the CognitoUser object if success or mfa required\n     */\n    AuthClass.prototype.signInWithPassword = function (authDetails) {\n        var _this = this;\n        var user = this.createCognitoUser(authDetails.getUsername());\n        return new Promise(function (resolve, reject) {\n            user.authenticateUser(authDetails, _this.authCallbacks(user, resolve, reject));\n        });\n    };\n    /**\n     * Sign in without a password\n     * @private\n     * @param {AuthenticationDetails} authDetails - the user sign in data\n     * @return - A promise resolves the CognitoUser object if success or mfa required\n     */\n    AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n        var _this = this;\n        var user = this.createCognitoUser(authDetails.getUsername());\n        user.setAuthenticationFlowType('CUSTOM_AUTH');\n        return new Promise(function (resolve, reject) {\n            user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n        });\n    };\n    /**\n     * get user current preferred mfa option\n     * this method doesn't work with totp, we need to deprecate it.\n     * @deprecated\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves the current preferred mfa option if success\n     */\n    AuthClass.prototype.getMFAOptions = function (user) {\n        return new Promise(function (res, rej) {\n            user.getMFAOptions(function (err, mfaOptions) {\n                if (err) {\n                    logger.debug('get MFA Options failed', err);\n                    rej(err);\n                    return;\n                }\n                logger.debug('get MFA options success', mfaOptions);\n                res(mfaOptions);\n                return;\n            });\n        });\n    };\n    /**\n     * get preferred mfa method\n     * @param {CognitoUser} user - the current cognito user\n     * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n     */\n    AuthClass.prototype.getPreferredMFA = function (user, params) {\n        var that = this;\n        return new Promise(function (res, rej) {\n            var bypassCache = params ? params.bypassCache : false;\n            user.getUserData(function (err, data) {\n                if (err) {\n                    logger.debug('getting preferred mfa failed', err);\n                    rej(err);\n                    return;\n                }\n                var mfaType = that._getMfaTypeFromUserData(data);\n                if (!mfaType) {\n                    rej('invalid MFA Type');\n                    return;\n                }\n                else {\n                    res(mfaType);\n                    return;\n                }\n            }, { bypassCache: bypassCache });\n        });\n    };\n    AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n        var ret = null;\n        var preferredMFA = data.PreferredMfaSetting;\n        // if the user has used Auth.setPreferredMFA() to setup the mfa type\n        // then the \"PreferredMfaSetting\" would exist in the response\n        if (preferredMFA) {\n            ret = preferredMFA;\n        }\n        else {\n            // if mfaList exists but empty, then its noMFA\n            var mfaList = data.UserMFASettingList;\n            if (!mfaList) {\n                // if SMS was enabled by using Auth.enableSMS(),\n                // the response would contain MFAOptions\n                // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n                // if it does not exist, then it should be NOMFA\n                var MFAOptions = data.MFAOptions;\n                if (MFAOptions) {\n                    ret = 'SMS_MFA';\n                }\n                else {\n                    ret = 'NOMFA';\n                }\n            }\n            else if (mfaList.length === 0) {\n                ret = 'NOMFA';\n            }\n            else {\n                logger.debug('invalid case for getPreferredMFA', data);\n            }\n        }\n        return ret;\n    };\n    AuthClass.prototype._getUserData = function (user, params) {\n        return new Promise(function (res, rej) {\n            user.getUserData(function (err, data) {\n                if (err) {\n                    logger.debug('getting user data failed', err);\n                    rej(err);\n                    return;\n                }\n                else {\n                    res(data);\n                    return;\n                }\n            }, params);\n        });\n    };\n    /**\n     * set preferred MFA method\n     * @param {CognitoUser} user - the current Cognito user\n     * @param {string} mfaMethod - preferred mfa method\n     * @return - A promise resolve if success\n     */\n    AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._getUserData(user, { bypassCache: true })];\n                    case 1:\n                        userData = _b.sent();\n                        smsMfaSettings = null;\n                        totpMfaSettings = null;\n                        _a = mfaMethod;\n                        switch (_a) {\n                            case 'TOTP' || 'SOFTWARE_TOKEN_MFA': return [3 /*break*/, 2];\n                            case 'SMS' || 'SMS_MFA': return [3 /*break*/, 3];\n                            case 'NOMFA': return [3 /*break*/, 4];\n                        }\n                        return [3 /*break*/, 6];\n                    case 2:\n                        totpMfaSettings = {\n                            PreferredMfa: true,\n                            Enabled: true\n                        };\n                        return [3 /*break*/, 7];\n                    case 3:\n                        smsMfaSettings = {\n                            PreferredMfa: true,\n                            Enabled: true\n                        };\n                        return [3 /*break*/, 7];\n                    case 4:\n                        mfaList = userData['UserMFASettingList'];\n                        return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];\n                    case 5:\n                        currentMFAType = _b.sent();\n                        if (currentMFAType === 'NOMFA') {\n                            return [2 /*return*/, Promise.resolve('No change for mfa type')];\n                        }\n                        else if (currentMFAType === 'SMS_MFA') {\n                            smsMfaSettings = {\n                                PreferredMfa: false,\n                                Enabled: false\n                            };\n                        }\n                        else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n                            totpMfaSettings = {\n                                PreferredMfa: false,\n                                Enabled: false\n                            };\n                        }\n                        else {\n                            return [2 /*return*/, Promise.reject('invalid MFA type')];\n                        }\n                        // if there is a UserMFASettingList in the response\n                        // we need to disable every mfa type in that list\n                        if (mfaList && mfaList.length !== 0) {\n                            // to disable SMS or TOTP if exists in that list\n                            mfaList.forEach(function (mfaType) {\n                                if (mfaType === 'SMS_MFA') {\n                                    smsMfaSettings = {\n                                        PreferredMfa: false,\n                                        Enabled: false\n                                    };\n                                }\n                                else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                                    totpMfaSettings = {\n                                        PreferredMfa: false,\n                                        Enabled: false\n                                    };\n                                }\n                            });\n                        }\n                        return [3 /*break*/, 7];\n                    case 6:\n                        logger.debug('no validmfa method provided');\n                        return [2 /*return*/, Promise.reject('no validmfa method provided')];\n                    case 7:\n                        that = this;\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                                    if (err) {\n                                        logger.debug('Set user mfa preference error', err);\n                                        return rej(err);\n                                    }\n                                    logger.debug('Set user mfa success', result);\n                                    logger.debug('Caching the latest user data into local');\n                                    // cache the latest result into user data\n                                    user.getUserData(function (err, data) {\n                                        if (err) {\n                                            logger.debug('getting user data failed', err);\n                                            return rej(err);\n                                        }\n                                        else {\n                                            return res(result);\n                                        }\n                                    }, { bypassCache: true });\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * diable SMS\n     * @deprecated\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves is success\n     */\n    AuthClass.prototype.disableSMS = function (user) {\n        return new Promise(function (res, rej) {\n            user.disableMFA(function (err, data) {\n                if (err) {\n                    logger.debug('disable mfa failed', err);\n                    rej(err);\n                    return;\n                }\n                logger.debug('disable mfa succeed', data);\n                res(data);\n                return;\n            });\n        });\n    };\n    /**\n     * enable SMS\n     * @deprecated\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves is success\n     */\n    AuthClass.prototype.enableSMS = function (user) {\n        return new Promise(function (res, rej) {\n            user.enableMFA(function (err, data) {\n                if (err) {\n                    logger.debug('enable mfa failed', err);\n                    rej(err);\n                    return;\n                }\n                logger.debug('enable mfa succeed', data);\n                res(data);\n                return;\n            });\n        });\n    };\n    /**\n     * Setup TOTP\n     * @param {CognitoUser} user - the current user\n     * @return - A promise resolves with the secret code if success\n     */\n    AuthClass.prototype.setupTOTP = function (user) {\n        return new Promise(function (res, rej) {\n            user.associateSoftwareToken({\n                onFailure: function (err) {\n                    logger.debug('associateSoftwareToken failed', err);\n                    rej(err);\n                    return;\n                },\n                associateSecretCode: function (secretCode) {\n                    logger.debug('associateSoftwareToken sucess', secretCode);\n                    res(secretCode);\n                    return;\n                }\n            });\n        });\n    };\n    /**\n     * verify TOTP setup\n     * @param {CognitoUser} user - the current user\n     * @param {string} challengeAnswer - challenge answer\n     * @return - A promise resolves is success\n     */\n    AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n        logger.debug('verfication totp token', user, challengeAnswer);\n        return new Promise(function (res, rej) {\n            user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n                onFailure: function (err) {\n                    logger.debug('verifyTotpToken failed', err);\n                    rej(err);\n                    return;\n                },\n                onSuccess: function (data) {\n                    logger.debug('verifyTotpToken success', data);\n                    res(data);\n                    return;\n                }\n            });\n        });\n    };\n    /**\n     * Send MFA code to confirm sign in\n     * @param {Object} user - The CognitoUser object\n     * @param {String} code - The confirmation code\n     */\n    AuthClass.prototype.confirmSignIn = function (user, code, mfaType) {\n        var _this = this;\n        if (!code) {\n            return Promise.reject('Code cannot be empty');\n        }\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            user.sendMFACode(code, {\n                onSuccess: function (session) { return __awaiter(_this, void 0, void 0, function () {\n                    var cred, e_3;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                logger.debug(session);\n                                _a.label = 1;\n                            case 1:\n                                _a.trys.push([1, 4, 5, 6]);\n                                return [4 /*yield*/, core_1.Credentials.clear()];\n                            case 2:\n                                _a.sent();\n                                return [4 /*yield*/, core_1.Credentials.set(session, 'session')];\n                            case 3:\n                                cred = _a.sent();\n                                logger.debug('succeed to get cognito credentials', cred);\n                                return [3 /*break*/, 6];\n                            case 4:\n                                e_3 = _a.sent();\n                                logger.debug('cannot get cognito credentials', e_3);\n                                return [3 /*break*/, 6];\n                            case 5:\n                                that.user = user;\n                                dispatchAuthEvent('signIn', user, user + \" has signed in\");\n                                resolve(user);\n                                return [7 /*endfinally*/];\n                            case 6: return [2 /*return*/];\n                        }\n                    });\n                }); },\n                onFailure: function (err) {\n                    logger.debug('confirm signIn failure', err);\n                    reject(err);\n                }\n            }, mfaType);\n        });\n    };\n    AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes) {\n        var _this = this;\n        if (!password) {\n            return Promise.reject('Password cannot be empty');\n        }\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            user.completeNewPasswordChallenge(password, requiredAttributes, {\n                onSuccess: function (session) { return __awaiter(_this, void 0, void 0, function () {\n                    var cred, e_4;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                logger.debug(session);\n                                _a.label = 1;\n                            case 1:\n                                _a.trys.push([1, 4, 5, 6]);\n                                return [4 /*yield*/, core_1.Credentials.clear()];\n                            case 2:\n                                _a.sent();\n                                return [4 /*yield*/, core_1.Credentials.set(session, 'session')];\n                            case 3:\n                                cred = _a.sent();\n                                logger.debug('succeed to get cognito credentials', cred);\n                                return [3 /*break*/, 6];\n                            case 4:\n                                e_4 = _a.sent();\n                                logger.debug('cannot get cognito credentials', e_4);\n                                return [3 /*break*/, 6];\n                            case 5:\n                                that.user = user;\n                                dispatchAuthEvent('signIn', user, user + \" has signed in\");\n                                resolve(user);\n                                return [7 /*endfinally*/];\n                            case 6: return [2 /*return*/];\n                        }\n                    });\n                }); },\n                onFailure: function (err) {\n                    logger.debug('completeNewPassword failure', err);\n                    dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n                    reject(err);\n                },\n                mfaRequired: function (challengeName, challengeParam) {\n                    logger.debug('signIn MFA required');\n                    user['challengeName'] = challengeName;\n                    user['challengeParam'] = challengeParam;\n                    resolve(user);\n                },\n                mfaSetup: function (challengeName, challengeParam) {\n                    logger.debug('signIn mfa setup', challengeName);\n                    user['challengeName'] = challengeName;\n                    user['challengeParam'] = challengeParam;\n                    resolve(user);\n                }\n            });\n        });\n    };\n    /**\n     * Send the answer to a custom challenge\n     * @param {CognitoUser} user - The CognitoUser object\n     * @param {String} challengeResponses - The confirmation code\n     */\n    AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses) {\n        var _this = this;\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        if (!challengeResponses) {\n            return Promise.reject('Challenge response cannot be empty');\n        }\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject));\n        });\n    };\n    /**\n     * Update an authenticated users' attributes\n     * @param {CognitoUser} - The currently logged in user object\n     * @return {Promise}\n     **/\n    AuthClass.prototype.updateUserAttributes = function (user, attributes) {\n        var attributeList = [];\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            that.userSession(user).then(function (session) {\n                for (var key in attributes) {\n                    if (key !== 'sub' &&\n                        key.indexOf('_verified') < 0) {\n                        var attr = {\n                            'Name': key,\n                            'Value': attributes[key]\n                        };\n                        attributeList.push(attr);\n                    }\n                }\n                user.updateAttributes(attributeList, function (err, result) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    else {\n                        return resolve(result);\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * Return user attributes\n     * @param {Object} user - The CognitoUser object\n     * @return - A promise resolves to user attributes if success\n     */\n    AuthClass.prototype.userAttributes = function (user) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.userSession(user).then(function (session) {\n                user.getUserAttributes(function (err, attributes) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(attributes);\n                    }\n                });\n            });\n        });\n    };\n    AuthClass.prototype.verifiedContact = function (user) {\n        var that = this;\n        return this.userAttributes(user)\n            .then(function (attributes) {\n            var attrs = that.attributesToObject(attributes);\n            var unverified = {};\n            var verified = {};\n            if (attrs['email']) {\n                if (attrs['email_verified']) {\n                    verified['email'] = attrs['email'];\n                }\n                else {\n                    unverified['email'] = attrs['email'];\n                }\n            }\n            if (attrs['phone_number']) {\n                if (attrs['phone_number_verified']) {\n                    verified['phone_number'] = attrs['phone_number'];\n                }\n                else {\n                    unverified['phone_number'] = attrs['phone_number'];\n                }\n            }\n            return {\n                verified: verified,\n                unverified: unverified\n            };\n        });\n    };\n    /**\n     * Get current authenticated user\n     * @return - A promise resolves to current authenticated CognitoUser if success\n     */\n    AuthClass.prototype.currentUserPoolUser = function (params) {\n        var _this = this;\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        var that = this;\n        return new Promise(function (res, rej) {\n            _this._storageSync.then(function () {\n                var user = that.userPool.getCurrentUser();\n                if (!user) {\n                    logger.debug('Failed to get user from user pool');\n                    rej('No current user');\n                    return;\n                }\n                // refresh the session if the session expired.\n                user.getSession(function (err, session) {\n                    if (err) {\n                        logger.debug('Failed to get the user session', err);\n                        rej(err);\n                        return;\n                    }\n                    // get user data from Cognito\n                    var bypassCache = params ? params.bypassCache : false;\n                    // validate the token's scope fisrt before calling this function\n                    var _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n                    if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                        user.getUserData(function (err, data) {\n                            if (err) {\n                                logger.debug('getting user data failed', err);\n                                // Make sure the user is still valid\n                                if (err.message === 'User is disabled' || err.message === 'User does not exist.') {\n                                    rej(err);\n                                }\n                                else {\n                                    // the error may also be thrown when lack of permissions to get user info etc\n                                    // in that case we just bypass the error\n                                    res(user);\n                                }\n                                return;\n                            }\n                            var preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                            var attributeList = [];\n                            for (var i = 0; i < data.UserAttributes.length; i++) {\n                                var attribute = {\n                                    Name: data.UserAttributes[i].Name,\n                                    Value: data.UserAttributes[i].Value,\n                                };\n                                var userAttribute = new amazon_cognito_identity_js_1.CognitoUserAttribute(attribute);\n                                attributeList.push(userAttribute);\n                            }\n                            var attributes = that.attributesToObject(attributeList);\n                            Object.assign(user, { attributes: attributes, preferredMFA: preferredMFA });\n                            return res(user);\n                        }, { bypassCache: bypassCache });\n                    }\n                    else {\n                        logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" +\n                            \"is not in the scopes of the access token\");\n                        return res(user);\n                    }\n                });\n            }).catch(function (e) {\n                logger.debug('Failed to sync cache info into memory', e);\n                return rej(e);\n            });\n        });\n    };\n    /**\n     * Get current authenticated user\n     * @param {CurrentUserOpts} - options for getting the current user\n     * @return - A promise resolves to current authenticated CognitoUser if success\n     */\n    AuthClass.prototype.currentAuthenticatedUser = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var federatedUser, e_5, user, e_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('getting current authenticted user');\n                        federatedUser = null;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_5 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_5);\n                        throw e_5;\n                    case 4:\n                        try {\n                            federatedUser = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user;\n                        }\n                        catch (e) {\n                            logger.debug('cannot load federated user from auth storage');\n                        }\n                        if (!federatedUser) return [3 /*break*/, 5];\n                        this.user = federatedUser;\n                        logger.debug('get current authenticated federated user', this.user);\n                        return [2 /*return*/, this.user];\n                    case 5:\n                        logger.debug('get current authenticated userpool user');\n                        user = null;\n                        _a.label = 6;\n                    case 6:\n                        _a.trys.push([6, 8, , 9]);\n                        return [4 /*yield*/, this.currentUserPoolUser(params)];\n                    case 7:\n                        user = _a.sent();\n                        return [3 /*break*/, 9];\n                    case 8:\n                        e_6 = _a.sent();\n                        if (e_6 === 'No userPool') {\n                            logger.error('Cannot get the current user because the user pool is missing. ' +\n                                'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n                        }\n                        logger.debug('The user is not authenticated by the error', e_6);\n                        throw ('not authenticated');\n                    case 9:\n                        this.user = user;\n                        return [2 /*return*/, this.user];\n                }\n            });\n        });\n    };\n    /**\n     * Get current user's session\n     * @return - A promise resolves to session object if success\n     */\n    AuthClass.prototype.currentSession = function () {\n        var that = this;\n        logger.debug('Getting current session');\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        return new Promise(function (res, rej) {\n            that.currentUserPoolUser().then(function (user) {\n                that.userSession(user).then(function (session) {\n                    res(session);\n                    return;\n                }).catch(function (e) {\n                    logger.debug('Failed to get the current session', e);\n                    rej(e);\n                    return;\n                });\n            }).catch(function (e) {\n                logger.debug('Failed to get the current user', e);\n                rej(e);\n                return;\n            });\n        });\n    };\n    /**\n     * Get the corresponding user session\n     * @param {Object} user - The CognitoUser object\n     * @return - A promise resolves to the session\n     */\n    AuthClass.prototype.userSession = function (user) {\n        if (!user) {\n            logger.debug('the user is null');\n            return Promise.reject('Failed to get the session because the user is empty');\n        }\n        return new Promise(function (resolve, reject) {\n            logger.debug('Getting the session from this user:', user);\n            user.getSession(function (err, session) {\n                if (err) {\n                    logger.debug('Failed to get the session from user', user);\n                    reject(err);\n                    return;\n                }\n                else {\n                    logger.debug('Succeed to get the user session', session);\n                    resolve(session);\n                    return;\n                }\n            });\n        });\n    };\n    /**\n     * Get  authenticated credentials of current user.\n     * @return - A promise resolves to be current user's credentials\n     */\n    AuthClass.prototype.currentUserCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var that, e_7, federatedInfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        that = this;\n                        logger.debug('Getting current user credentials');\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_7 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_7);\n                        throw e_7;\n                    case 4:\n                        federatedInfo = null;\n                        try {\n                            federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n                        }\n                        catch (e) {\n                            logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n                        }\n                        if (federatedInfo) {\n                            // refresh the jwt token here if necessary\n                            return [2 /*return*/, core_1.Credentials.refreshFederatedToken(federatedInfo)];\n                        }\n                        else {\n                            return [2 /*return*/, this.currentSession()\n                                    .then(function (session) {\n                                    logger.debug('getting session success', session);\n                                    return core_1.Credentials.set(session, 'session');\n                                }).catch(function (error) {\n                                    logger.debug('getting session failed', error);\n                                    return core_1.Credentials.set(null, 'guest');\n                                })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.currentCredentials = function () {\n        logger.debug('getting current credntials');\n        return core_1.Credentials.get();\n    };\n    /**\n     * Initiate an attribute confirmation request\n     * @param {Object} user - The CognitoUser\n     * @param {Object} attr - The attributes to be verified\n     * @return - A promise resolves to callback data if success\n     */\n    AuthClass.prototype.verifyUserAttribute = function (user, attr) {\n        return new Promise(function (resolve, reject) {\n            user.getAttributeVerificationCode(attr, {\n                onSuccess: function () { return resolve(); },\n                onFailure: function (err) { return reject(err); }\n            });\n        });\n    };\n    /**\n     * Confirm an attribute using a confirmation code\n     * @param {Object} user - The CognitoUser\n     * @param {Object} attr - The attribute to be verified\n     * @param {String} code - The confirmation code\n     * @return - A promise resolves to callback data if success\n     */\n    AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n        if (!code) {\n            return Promise.reject('Code cannot be empty');\n        }\n        return new Promise(function (resolve, reject) {\n            user.verifyAttribute(attr, code, {\n                onSuccess: function (data) {\n                    resolve(data);\n                    return;\n                },\n                onFailure: function (err) {\n                    reject(err);\n                    return;\n                }\n            });\n        });\n    };\n    AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n        var that = this;\n        return that.currentUserPoolUser()\n            .then(function (user) { return that.verifyUserAttribute(user, attr); });\n    };\n    /**\n     * Confirm current user's attribute using a confirmation code\n     * @param {Object} attr - The attribute to be verified\n     * @param {String} code - The confirmation code\n     * @return - A promise resolves to callback data if success\n     */\n    AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n        var that = this;\n        return that.currentUserPoolUser()\n            .then(function (user) { return that.verifyUserAttributeSubmit(user, attr, code); });\n    };\n    AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_8, isSignedInHostedUI;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_8 = _a.sent();\n                        logger.debug('Failed to sync cache info into memory', e_8);\n                        throw e_8;\n                    case 3:\n                        isSignedInHostedUI = this._oAuthHandler\n                            && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n                        return [2 /*return*/, new Promise(function (res, rej) {\n                                if (opts && opts.global) {\n                                    logger.debug('user global sign out', user);\n                                    // in order to use global signout\n                                    // we must validate the user as an authenticated user by using getSession\n                                    user.getSession(function (err, result) {\n                                        if (err) {\n                                            logger.debug('failed to get the user session', err);\n                                            return rej(err);\n                                        }\n                                        user.globalSignOut({\n                                            onSuccess: function (data) {\n                                                logger.debug('global sign out success');\n                                                if (isSignedInHostedUI) {\n                                                    return res(_this._oAuthHandler.signOut());\n                                                }\n                                                else {\n                                                    return res();\n                                                }\n                                            },\n                                            onFailure: function (err) {\n                                                logger.debug('global sign out failed', err);\n                                                return rej(err);\n                                            }\n                                        });\n                                    });\n                                }\n                                else {\n                                    logger.debug('user sign out', user);\n                                    user.signOut();\n                                    if (isSignedInHostedUI) {\n                                        return res(_this._oAuthHandler.signOut());\n                                    }\n                                    else {\n                                        return res();\n                                    }\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Sign out method\n     * @\n     * @return - A promise resolved if success\n     */\n    AuthClass.prototype.signOut = function (opts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var e_9, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.cleanCachedItems()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_9 = _a.sent();\n                        logger.debug('failed to clear cached items');\n                        return [3 /*break*/, 3];\n                    case 3:\n                        if (!this.userPool) return [3 /*break*/, 7];\n                        user = this.userPool.getCurrentUser();\n                        if (!user) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        logger.debug('no current Cognito user');\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        logger.debug('no Congito User pool');\n                        _a.label = 8;\n                    case 8:\n                        /**\n                         * Note for future refactor - no reliable way to get username with\n                         * Cognito User Pools vs Identity when federating with Social Providers\n                         * This is why we need a well structured session object that can be inspected\n                         * and information passed back in the message below for Hub dispatch\n                        */\n                        dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n                        this.user = null;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.cleanCachedItems = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // clear cognito cached item\n                    return [4 /*yield*/, core_1.Credentials.clear()];\n                    case 1:\n                        // clear cognito cached item\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Change a password for an authenticated user\n     * @param {Object} user - The CognitoUser object\n     * @param {String} oldPassword - the current password\n     * @param {String} newPassword - the requested new password\n     * @return - A promise resolves if success\n     */\n    AuthClass.prototype.changePassword = function (user, oldPassword, newPassword) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.userSession(user).then(function (session) {\n                user.changePassword(oldPassword, newPassword, function (err, data) {\n                    if (err) {\n                        logger.debug('change password failure', err);\n                        return reject(err);\n                    }\n                    else {\n                        return resolve(data);\n                    }\n                });\n            });\n        });\n    };\n    /**\n     * Initiate a forgot password request\n     * @param {String} username - the username to change password\n     * @return - A promise resolves if success\n     */\n    AuthClass.prototype.forgotPassword = function (username) {\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        if (!username) {\n            return Promise.reject('Username cannot be empty');\n        }\n        var user = this.createCognitoUser(username);\n        return new Promise(function (resolve, reject) {\n            user.forgotPassword({\n                onSuccess: function () {\n                    resolve();\n                    return;\n                },\n                onFailure: function (err) {\n                    logger.debug('forgot password failure', err);\n                    reject(err);\n                    return;\n                },\n                inputVerificationCode: function (data) {\n                    resolve(data);\n                    return;\n                }\n            });\n        });\n    };\n    /**\n     * Confirm a new password using a confirmation Code\n     * @param {String} username - The username\n     * @param {String} code - The confirmation code\n     * @param {String} password - The new password\n     * @return - A promise that resolves if success\n     */\n    AuthClass.prototype.forgotPasswordSubmit = function (username, code, password) {\n        if (!this.userPool) {\n            return Promise.reject('No userPool');\n        }\n        if (!username) {\n            return Promise.reject('Username cannot be empty');\n        }\n        if (!code) {\n            return Promise.reject('Code cannot be empty');\n        }\n        if (!password) {\n            return Promise.reject('Password cannot be empty');\n        }\n        var user = this.createCognitoUser(username);\n        return new Promise(function (resolve, reject) {\n            user.confirmPassword(code, password, {\n                onSuccess: function () {\n                    resolve();\n                    return;\n                },\n                onFailure: function (err) {\n                    reject(err);\n                    return;\n                }\n            });\n        });\n    };\n    /**\n     * Get user information\n     * @async\n     * @return {Object }- current User's information\n     */\n    AuthClass.prototype.currentUserInfo = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        source = core_1.Credentials.getCredSource();\n                        if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.currentUserPoolUser()\n                                .catch(function (err) { return logger.debug(err); })];\n                    case 1:\n                        user = _a.sent();\n                        if (!user) {\n                            return [2 /*return*/, null];\n                        }\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 8, , 9]);\n                        return [4 /*yield*/, this.userAttributes(user)];\n                    case 3:\n                        attributes = _a.sent();\n                        userAttrs = this.attributesToObject(attributes);\n                        credentials = null;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 6, , 7]);\n                        return [4 /*yield*/, this.currentCredentials()];\n                    case 5:\n                        credentials = _a.sent();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        e_10 = _a.sent();\n                        logger.debug('Failed to retrieve credentials while getting current user info', e_10);\n                        return [3 /*break*/, 7];\n                    case 7:\n                        info = {\n                            'id': credentials ? credentials.identityId : undefined,\n                            'username': user.getUsername(),\n                            'attributes': userAttrs\n                        };\n                        return [2 /*return*/, info];\n                    case 8:\n                        err_1 = _a.sent();\n                        logger.debug('currentUserInfo error', err_1);\n                        return [2 /*return*/, {}];\n                    case 9:\n                        if (source === 'federated') {\n                            user = this.user;\n                            return [2 /*return*/, user ? user : {}];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, e_11, token, identity_id, expires_at, credentials, currentUser;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._config.identityPoolId && !this._config.userPoolId) {\n                            throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n                        }\n                        // Ensure backwards compatability\n                        if (typeof providerOrOptions === 'undefined') {\n                            if (this._config.identityPoolId && !this._config.userPoolId) {\n                                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n                            }\n                        }\n                        if (!(types_1.isFederatedSignInOptions(providerOrOptions)\n                            || types_1.isFederatedSignInOptionsCustom(providerOrOptions)\n                            || typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];\n                        options = providerOrOptions || { provider: CognitoHostedUIIdentityProvider.Cognito };\n                        provider = types_1.isFederatedSignInOptions(options)\n                            ? options.provider\n                            : options.customProvider;\n                        customState = types_1.isFederatedSignInOptions(options)\n                            ? options.customState\n                            : options.customState;\n                        if (this._config.userPoolId) {\n                            client_id = types_1.isCognitoHostedOpts(this._config.oauth)\n                                ? this._config.userPoolWebClientId\n                                : this._config.oauth.clientID;\n                            redirect_uri = types_1.isCognitoHostedOpts(this._config.oauth)\n                                ? this._config.oauth.redirectSignIn\n                                : this._config.oauth.redirectUri;\n                            this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n                        }\n                        return [3 /*break*/, 8];\n                    case 1:\n                        provider = providerOrOptions;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.currentAuthenticatedUser()];\n                    case 3:\n                        loggedInUser = _a.sent();\n                        logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n                You should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n                        return [3 /*break*/, 5];\n                    case 4:\n                        e_11 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n                        return [4 /*yield*/, core_1.Credentials.set({ provider: provider, token: token, identity_id: identity_id, user: user, expires_at: expires_at }, 'federation')];\n                    case 6:\n                        credentials = _a.sent();\n                        return [4 /*yield*/, this.currentAuthenticatedUser()];\n                    case 7:\n                        currentUser = _a.sent();\n                        dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n                        logger.debug('federated sign in credentials', credentials);\n                        return [2 /*return*/, credentials];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Used to complete the OAuth flow with or without the Cognito Hosted UI\n     * @param {String} URL - optional parameter for customers to pass in the response URL\n     */\n    AuthClass.prototype._handleAuthResponse = function (URL) {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, _b, customState, err_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!this._config.userPoolId) {\n                            throw new Error(\"OAuth responses require a User Pool defined in config\");\n                        }\n                        dispatchAuthEvent('parsingCallbackUrl', { url: URL }, \"The callback url is being parsed\");\n                        currentUrl = URL || (core_1.JS.browserOrNode().isBrowser ? window.location.href : '');\n                        hasCodeOrError = !!(url_1.parse(currentUrl).query || '')\n                            .split('&')\n                            .map(function (entry) { return entry.split('='); })\n                            .find(function (_a) {\n                            var k = _a[0];\n                            return k === 'code' || k === 'error';\n                        });\n                        hasTokenOrError = !!(url_1.parse(currentUrl).hash || '#')\n                            .substr(1)\n                            .split('&')\n                            .map(function (entry) { return entry.split('='); })\n                            .find(function (_a) {\n                            var k = _a[0];\n                            return k === 'access_token' || k === 'error';\n                        });\n                        if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 6];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];\n                    case 2:\n                        _a = _c.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n                        session = new amazon_cognito_identity_js_1.CognitoUserSession({\n                            IdToken: new amazon_cognito_identity_js_1.CognitoIdToken({ IdToken: idToken }),\n                            RefreshToken: new amazon_cognito_identity_js_1.CognitoRefreshToken({ RefreshToken: refreshToken }),\n                            AccessToken: new amazon_cognito_identity_js_1.CognitoAccessToken({ AccessToken: accessToken })\n                        });\n                        credentials = void 0;\n                        if (!this._config.identityPoolId) return [3 /*break*/, 4];\n                        return [4 /*yield*/, core_1.Credentials.set(session, 'session')];\n                    case 3:\n                        credentials = _c.sent();\n                        logger.debug('AWS credentials', credentials);\n                        _c.label = 4;\n                    case 4:\n                        isCustomStateIncluded = /-/.test(state);\n                        currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n                        dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n                        dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n                        if (isCustomStateIncluded) {\n                            _b = state.split('-'), customState = _b[1];\n                            dispatchAuthEvent('customOAuthState', customState, \"State for user \" + currentUser.getUsername());\n                        }\n                        // This calls cacheTokens() in Cognito SDK\n                        currentUser.setSignInUserSession(session);\n                        //#endregion\n                        if (window && typeof window.history !== 'undefined') {\n                            window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n                        }\n                        return [2 /*return*/, credentials];\n                    case 5:\n                        err_2 = _c.sent();\n                        logger.debug(\"Error in cognito hosted auth response\", err_2);\n                        dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n                        dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n                        dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n                        throw err_2;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    AuthClass.prototype.essentialCredentials = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated\n        };\n    };\n    AuthClass.prototype.attributesToObject = function (attributes) {\n        var obj = {};\n        if (attributes) {\n            attributes.map(function (attribute) {\n                if (attribute.Value === 'true') {\n                    obj[attribute.Name] = true;\n                }\n                else if (attribute.Value === 'false') {\n                    obj[attribute.Name] = false;\n                }\n                else {\n                    obj[attribute.Name] = attribute.Value;\n                }\n            });\n        }\n        return obj;\n    };\n    AuthClass.prototype.createCognitoUser = function (username) {\n        var userData = {\n            Username: username,\n            Pool: this.userPool,\n        };\n        userData.Storage = this._storage;\n        var authenticationFlowType = this._config.authenticationFlowType;\n        var user = new amazon_cognito_identity_js_1.CognitoUser(userData);\n        if (authenticationFlowType) {\n            user.setAuthenticationFlowType(authenticationFlowType);\n        }\n        return user;\n    };\n    AuthClass.prototype._isValidAuthStorage = function (obj) {\n        // We need to check if the obj has the functions of Storage\n        return !!obj &&\n            typeof obj.getItem === 'function' &&\n            typeof obj.setItem === 'function' &&\n            typeof obj.removeItem === 'function' &&\n            typeof obj.clear === 'function';\n    };\n    return AuthClass;\n}());\nexports.default = AuthClass;\n//# sourceMappingURL=Auth.js.map"]},"metadata":{},"sourceType":"script"}