{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenKind = undefined;\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\n\nvar _error = require('../error');\n\nvar _blockStringValue = require('./blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\n\n\nvar TokenKind = exports.TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw (0, _error.syntaxError)(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue2.default)(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","map":{"version":3,"sources":["/Users/JohnnyReichman/Documents/independent_work/fullstack_template/JTR_fullstack_template/assets/node_modules/@aws-amplify/api/node_modules/graphql/language/lexer.js"],"names":["Object","defineProperty","exports","value","TokenKind","undefined","createLexer","getTokenDesc","_error","require","_blockStringValue","_blockStringValue2","_interopRequireDefault","obj","__esModule","default","source","options","startOfFileToken","Tok","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","charCodeAt","String","prototype","slice","start","end","column","prev","toJSON","inspect","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toString","toUpperCase","body","bodyLength","length","pos","positionAfterWhitespace","col","call","syntaxError","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","d","char2hex"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenKind = undefined;\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\n\nvar _error = require('../error');\n\nvar _blockStringValue = require('./blockStringValue');\n\nvar _blockStringValue2 = _interopRequireDefault(_blockStringValue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n  return token;\n}\n\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind = exports.TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n\n/**\n * The enum type representing the token kinds values.\n */\n\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n\n/**\n * Helper function for constructing the Token object.\n */\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos);\n\n  // SourceCharacter\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw (0, _error.syntaxError)(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n      break;\n    // :\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));\n}\n\n/**\n * Report a message that an unexpected character was encountered.\n */\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position);\n    // tab | space | comma | BOM\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n\n/**\n * Returns the new position in the source after reading digits.\n */\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n    return position;\n  }\n  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&\n  // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n        case 47:\n          value += '/';\n          break;\n        case 92:\n          value += '\\\\';\n          break;\n        case 98:\n          value += '\\b';\n          break;\n        case 102:\n          value += '\\f';\n          break;\n        case 110:\n          value += '\\n';\n          break;\n        case 114:\n          value += '\\r';\n          break;\n        case 116:\n          value += '\\t';\n          break;\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n        default:\n          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue2.default)(rawValue));\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    // Escape Triple-Quote (\\\"\"\")\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n}\n\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}"]},"metadata":{},"sourceType":"script"}