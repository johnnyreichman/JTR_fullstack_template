{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar Logger_1 = require(\"../Logger\");\n\nvar JS_1 = require(\"../JS\");\n\nvar Amplify_1 = require(\"../Amplify\");\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\n\n\nvar ServiceWorkerClass =\n/** @class */\nfunction () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger_1.ConsoleLogger('ServiceWorker');\n  }\n\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function get() {\n      return this._serviceWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n\n    if (scope === void 0) {\n      scope = '/';\n    }\n\n    this._logger.debug(\"registering \" + filePath);\n\n    this._logger.debug(\"registering service worker with scope \" + scope);\n\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          'scope': scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n\n          _this._registration = registration;\n\n          _this._setupListeners();\n\n          _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \" + error);\n\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n\n\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (JS_1.default.browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n\n            _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n\n            return _this._registration.pushManager.subscribe({\n              'userVisibleOnly': true,\n              'applicationServerKey': _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n\n              _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n\n\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n    *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n\n\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n\n\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n\n      _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n\n      if (Amplify_1.default.Analytics && typeof Amplify_1.default.Analytics.record === 'function') {\n        Amplify_1.default.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            'state': currentState\n          }\n        });\n      }\n    });\n\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \" + event);\n    });\n  };\n\n  return ServiceWorkerClass;\n}();\n\nexports.default = ServiceWorkerClass;","map":{"version":3,"sources":["../../src/ServiceWorker/ServiceWorker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar Logger_1 = require(\"../Logger\");\nvar JS_1 = require(\"../JS\");\nvar Amplify_1 = require(\"../Amplify\");\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */ (function () {\n    function ServiceWorkerClass() {\n        // The AWS Amplify logger\n        this._logger = new Logger_1.ConsoleLogger('ServiceWorker');\n    }\n    Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n        /**\n         * Get the currently active service worker\n         */\n        get: function () {\n            return this._serviceWorker;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    ServiceWorkerClass.prototype.register = function (filePath, scope) {\n        var _this = this;\n        if (filePath === void 0) { filePath = '/service-worker.js'; }\n        if (scope === void 0) { scope = '/'; }\n        this._logger.debug(\"registering \" + filePath);\n        this._logger.debug(\"registering service worker with scope \" + scope);\n        return new Promise(function (resolve, reject) {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker.register(filePath, {\n                    'scope': scope\n                }).then(function (registration) {\n                    if (registration.installing) {\n                        _this._serviceWorker = registration.installing;\n                    }\n                    else if (registration.waiting) {\n                        _this._serviceWorker = registration.waiting;\n                    }\n                    else if (registration.active) {\n                        _this._serviceWorker = registration.active;\n                    }\n                    _this._registration = registration;\n                    _this._setupListeners();\n                    _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n                    return resolve(registration);\n                }).catch(function (error) {\n                    _this._logger.debug(\"Service Worker Registration Failed \" + error);\n                    return reject(error);\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n        var _this = this;\n        if (!this._registration)\n            throw new Error('Service Worker not registered');\n        this._publicKey = publicKey;\n        return new Promise(function (resolve, reject) {\n            if (JS_1.default.browserOrNode().isBrowser) {\n                _this._registration.pushManager.getSubscription()\n                    .then(function (subscription) {\n                    if (subscription) {\n                        _this._subscription = subscription;\n                        _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n                        resolve(subscription);\n                    }\n                    else {\n                        _this._logger.debug(\"User is NOT subscribed to push\");\n                        return _this._registration.pushManager.subscribe({\n                            'userVisibleOnly': true,\n                            'applicationServerKey': _this._urlB64ToUint8Array(publicKey)\n                        }).then(function (subscription) {\n                            _this._subscription = subscription;\n                            _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n                            resolve(subscription);\n                        }).catch(function (error) {\n                            _this._logger.error(error);\n                        });\n                    }\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n        var padding = '='.repeat((4 - base64String.length % 4) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (var i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    };\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n      *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    ServiceWorkerClass.prototype.send = function (message) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    };\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    ServiceWorkerClass.prototype._setupListeners = function () {\n        var _this = this;\n        this._serviceWorker.addEventListener('statechange', function (event) {\n            var currentState = _this._serviceWorker.state;\n            _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n            if (Amplify_1.default.Analytics && typeof Amplify_1.default.Analytics.record === 'function') {\n                Amplify_1.default.Analytics.record({\n                    name: 'ServiceWorker',\n                    attributes: {\n                        'state': currentState\n                    }\n                });\n            }\n        });\n        this._serviceWorker.addEventListener('message', function (event) {\n            _this._logger.debug(\"ServiceWorker message event: \" + event);\n        });\n    };\n    return ServiceWorkerClass;\n}());\nexports.default = ServiceWorkerClass;\n//# sourceMappingURL=ServiceWorker.js.map"]},"metadata":{},"sourceType":"script"}