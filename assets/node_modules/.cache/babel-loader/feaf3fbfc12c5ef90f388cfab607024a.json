{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport * as Cookies from 'js-cookie';\n/** @class */\n\nvar CookieStorage = function () {\n  /**\n   * Constructs a new CookieStorage object\n   * @param {object} data Creation options.\n   * @param {string} data.domain Cookies domain (mandatory).\n   * @param {string} data.path Cookies path (default: '/')\n   * @param {integer} data.expires Cookie expiration (in days, default: 365)\n   * @param {boolean} data.secure Cookie secure flag (default: true)\n   */\n  function CookieStorage(data) {\n    _classCallCheck(this, CookieStorage);\n\n    if (data.domain) {\n      this.domain = data.domain;\n    } else {\n      throw new Error('The domain of cookieStorage can not be undefined.');\n    }\n\n    if (data.path) {\n      this.path = data.path;\n    } else {\n      this.path = '/';\n    }\n\n    if (Object.prototype.hasOwnProperty.call(data, 'expires')) {\n      this.expires = data.expires;\n    } else {\n      this.expires = 365;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(data, 'secure')) {\n      this.secure = data.secure;\n    } else {\n      this.secure = true;\n    }\n  }\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n\n\n  CookieStorage.prototype.setItem = function setItem(key, value) {\n    Cookies.set(key, value, {\n      path: this.path,\n      expires: this.expires,\n      domain: this.domain,\n      secure: this.secure\n    });\n    return Cookies.get(key);\n  };\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n\n\n  CookieStorage.prototype.getItem = function getItem(key) {\n    return Cookies.get(key);\n  };\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n\n\n  CookieStorage.prototype.removeItem = function removeItem(key) {\n    return Cookies.remove(key, {\n      path: this.path,\n      domain: this.domain,\n      secure: this.secure\n    });\n  };\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n\n\n  CookieStorage.prototype.clear = function clear() {\n    var cookies = Cookies.get();\n    var index = void 0;\n\n    for (index = 0; index < cookies.length; ++index) {\n      Cookies.remove(cookies[index]);\n    }\n\n    return {};\n  };\n\n  return CookieStorage;\n}();\n\nexport default CookieStorage;","map":{"version":3,"sources":["/Users/JohnnyReichman/Documents/independent_work/fullstack_template/JTR_fullstack_template/assets/node_modules/amazon-cognito-identity-js/es/CookieStorage.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Cookies","CookieStorage","data","domain","Error","path","Object","prototype","hasOwnProperty","call","expires","secure","setItem","key","value","set","get","getItem","removeItem","remove","clear","cookies","index","length"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport * as Cookies from 'js-cookie';\n\n/** @class */\n\nvar CookieStorage = function () {\n\n  /**\n   * Constructs a new CookieStorage object\n   * @param {object} data Creation options.\n   * @param {string} data.domain Cookies domain (mandatory).\n   * @param {string} data.path Cookies path (default: '/')\n   * @param {integer} data.expires Cookie expiration (in days, default: 365)\n   * @param {boolean} data.secure Cookie secure flag (default: true)\n   */\n  function CookieStorage(data) {\n    _classCallCheck(this, CookieStorage);\n\n    if (data.domain) {\n      this.domain = data.domain;\n    } else {\n      throw new Error('The domain of cookieStorage can not be undefined.');\n    }\n    if (data.path) {\n      this.path = data.path;\n    } else {\n      this.path = '/';\n    }\n    if (Object.prototype.hasOwnProperty.call(data, 'expires')) {\n      this.expires = data.expires;\n    } else {\n      this.expires = 365;\n    }\n    if (Object.prototype.hasOwnProperty.call(data, 'secure')) {\n      this.secure = data.secure;\n    } else {\n      this.secure = true;\n    }\n  }\n\n  /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */\n\n\n  CookieStorage.prototype.setItem = function setItem(key, value) {\n    Cookies.set(key, value, {\n      path: this.path,\n      expires: this.expires,\n      domain: this.domain,\n      secure: this.secure\n    });\n    return Cookies.get(key);\n  };\n\n  /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */\n\n\n  CookieStorage.prototype.getItem = function getItem(key) {\n    return Cookies.get(key);\n  };\n\n  /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */\n\n\n  CookieStorage.prototype.removeItem = function removeItem(key) {\n    return Cookies.remove(key, {\n      path: this.path,\n      domain: this.domain,\n      secure: this.secure\n    });\n  };\n\n  /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */\n\n\n  CookieStorage.prototype.clear = function clear() {\n    var cookies = Cookies.get();\n    var index = void 0;\n    for (index = 0; index < cookies.length; ++index) {\n      Cookies.remove(cookies[index]);\n    }\n    return {};\n  };\n\n  return CookieStorage;\n}();\n\nexport default CookieStorage;"]},"metadata":{},"sourceType":"module"}