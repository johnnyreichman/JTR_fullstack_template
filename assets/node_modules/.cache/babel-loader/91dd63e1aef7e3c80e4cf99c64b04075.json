{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _source = require('./source');\n\nvar _error = require('../error');\n\nvar _lexer = require('./lexer');\n\nvar _kinds = require('./kinds');\n\nvar _directiveLocation = require('./directiveLocation');\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\n/**\n * Configuration options to control parser behavior\n */\n\n\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\n\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\n\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SOF);\n  var definitions = [];\n\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, _lexer.TokenKind.EOF));\n\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition = void 0;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: _kinds.Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.STRING:\n    case _lexer.TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: _kinds.Kind.STRING,\n    value: token.value,\n    block: token.kind === _lexer.TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.Kind.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: _kinds.Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\n\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'extend':\n        return parseTypeExtension(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, _lexer.TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, _lexer.TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];\n}\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/JohnnyReichman/Documents/independent_work/fullstack_template/JTR_fullstack_template/assets/node_modules/@aws-amplify/api/node_modules/graphql/language/parser.js"],"names":["Object","defineProperty","exports","value","parse","parseValue","parseType","parseConstValue","parseTypeReference","parseNamedType","_source","require","_error","_lexer","_kinds","_directiveLocation","source","options","sourceObj","Source","TypeError","String","lexer","createLexer","parseDocument","expect","TokenKind","SOF","parseValueLiteral","EOF","type","parseName","token","NAME","kind","Kind","loc","start","definitions","push","parseDefinition","skip","DOCUMENT","peek","parseExecutableDefinition","parseTypeSystemDefinition","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","many","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","FRAGMENT_SPREAD","parseFragmentName","typeCondition","advance","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseTypeExtension","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","DirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","end","prototype","toJSON","inspect","match","syntaxError","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _source = require('./source');\n\nvar _error = require('../error');\n\nvar _lexer = require('./lexer');\n\nvar _kinds = require('./kinds');\n\nvar _directiveLocation = require('./directiveLocation');\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\n\n/**\n * Configuration options to control parser behavior\n */\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n\n/**\n * Converts a name lex token into a name parse node.\n */\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n}\n\n// Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SOF);\n  var definitions = [];\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, _lexer.TokenKind.EOF));\n\n  return {\n    kind: _kinds.Kind.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n */\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        // Note: The schema definition language is an experimental addition.\n        return parseTypeSystemDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    // Note: The schema definition language is an experimental addition.\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n\n// Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n  return {\n    kind: _kinds.Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationType : one of query mutation subscription\n */\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n    case 'mutation':\n      return 'mutation';\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Variable : $ Name\n */\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * SelectionSet : { Selection+ }\n */\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\nfunction parseField(lexer) {\n  var start = lexer.token;\n\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * Argument[Const] : Name : Value[?Const]\n */\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n  var typeCondition = void 0;\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment');\n  // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: _kinds.Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  return {\n    kind: _kinds.Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentName : Name but not `on`\n */\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n  return parseName(lexer);\n}\n\n// Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.STRING:\n    case _lexer.TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n      lexer.advance();\n      return {\n        kind: _kinds.Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n      break;\n  }\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: _kinds.Kind.STRING,\n    value: token.value,\n    block: token.kind === _lexer.TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.Kind.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n  return {\n    kind: _kinds.Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n  return directives;\n}\n\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n  return type;\n}\n\n/**\n * NamedType : Name\n */\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtension\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n      case 'extend':\n        return parseTypeExtension(lexer);\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);\n}\n\n/**\n * Description : StringValue\n */\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n  if (lexer.token.value === 'implements') {\n    lexer.advance();\n    // Optional leading ampersand\n    skip(lexer, _lexer.TokenKind.AMP);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.AMP) ||\n    // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));\n  }\n  return types;\n}\n\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = void 0;\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: _kinds.Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, _lexer.TokenKind.PIPE);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, _lexer.TokenKind.PIPE));\n  }\n  return types;\n}\n\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];\n}\n\n/**\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === _lexer.TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n  return locations;\n}\n\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n  throw unexpected(lexer, start);\n}\n\n// Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return { start: this.start, end: this.end };\n};\n\n/**\n * Determines if the next token is of a given kind\n */\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n  if (match) {\n    lexer.advance();\n  }\n  return match;\n}\n\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}"]},"metadata":{},"sourceType":"script"}